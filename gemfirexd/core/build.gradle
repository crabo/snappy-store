/*
 * Copyright (c) 2017-2019 TIBCO Software Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License. You
 * may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License. See accompanying
 * LICENSE file.
 */

apply plugin: 'ca.coglinc2.javacc'

dependencies {
  compile project(subprojectBase + 'gemfire-core')
  compile project(subprojectBase + 'snappydata-store-shared')
  compile project(subprojectBase + 'snappydata-store-client')
  compileOnly project(subprojectBase + 'snappydata-store-prebuild')

  compileOnly files("${System.getProperty('java.home')}/../lib/tools.jar")
  compileOnly "xalan:xalan:${xalanVersion}"
  compileOnly "xalan:serializer:${xalanVersion}"
  compileOnly "com.pivotal:pxf-api:${pxfVersion}"
  compile "org.osgi:org.osgi.core:${osgiVersion}"
  compile "org.apache.ant:ant:${antVersion}"
  compile "javax.servlet:javax.servlet-api:${javaxServletVersion}"
  compile "org.apache.thrift:libthrift:${thriftVersion}"
  compile "com.esotericsoftware:kryo-shaded:${kryoVersion}"

  compileOnly "org.apache.hadoop:hadoop-annotations:${hadoopVersion}"
  compileOnly "org.apache.hadoop:hadoop-auth:${hadoopVersion}"
  compileOnly "org.apache.hadoop:hadoop-common:${hadoopVersion}"
  compileOnly "org.apache.hadoop:hadoop-hdfs:${hadoopVersion}"
  compileOnly "org.apache.hadoop:hadoop-mapreduce-client-core:${hadoopVersion}"
  compileOnly "com.google.protobuf:protobuf-java:${protobufVersion}"
  compileOnly "org.glassfish.jersey.core:jersey-server:${jerseyVersion}"
  compileOnly "org.glassfish.jersey.containers:jersey-container-servlet-core:${jerseyVersion}"
  compileOnly "org.eclipse.jetty:jetty-server:${jettyVersion}"
  compileOnly "org.eclipse.jetty:jetty-util:${jettyVersion}"
  compileOnly "com.google.code.findbugs:jsr305:${jsr305Version}"
}

// move javacc output directory to a place where IDEA can easily register
def javaccOut = 'src/generated/javacc'

sourceSets.main.java.srcDirs = [ 'src/main/java', javaccOut, 'src/drda/java' ]

// update javacc generated files as per in original derby build
compileJavacc {
  arguments = [ grammar_encoding: 'UTF-8' ]
  outputDirectory = file(javaccOut)

  doLast {
    def grammarDir = 'com/pivotal/gemfirexd/internal/impl/sql/compile'
    def matcherDir = 'com/pivotal/gemfirexd/internal/engine/sql/compile'

    println 'Replacing all occurrances of GetImage() to GetImage(jjmatchedKind)'

    replaceRegex("${compileJavacc.outputDirectory}/${grammarDir}", 'SQLParser.java',
        'GetImage\\(\\)', 'GetImage(jjmatchedKind)')
    replaceRegex("${compileJavacc.outputDirectory}/${grammarDir}", 'SQLParserTokenManager.java',
        'GetImage\\(\\)', 'GetImage(jjmatchedKind)')

    replaceRegex("${compileJavacc.outputDirectory}/${matcherDir}", 'SQLMatcher.java',
        'GetImage\\(\\)', 'GetImage(jjmatchedKind)')
    replaceRegex("${compileJavacc.outputDirectory}/${matcherDir}", 'SQLMatcherTokenManager.java',
        'GetImage\\(\\)', 'GetImage(jjmatchedKind)')
  }
}

task deleteGenerated(type: Delete) {
  delete javaccOut
}
clean.dependsOn deleteGenerated

task generatePropertiesFiles(dependsOn: 'processResources') {
  def infoDir = file("${sourceSets.main.java.outputDir}/com/pivotal/gemfirexd/internal/info")
  outputs.files "${infoDir}/DBMS.properties", "${infoDir}/net.properties"
  inputs.dir "${projectDir}/src/main/resources/com/pivotal/gemfirexd/internal/info"

  doLast {
    println('Creating engine properties')
    derbyProps.put('gemfirexd.product.technology.name', "${DERBY_NAME} Embedded Engine")
    writeProperties(infoDir, 'DBMS.properties', COPYRIGHT, derbyProps)

    println('Creating DRDA server properties')
    derbyProps.put('gemfirexd.product.technology.name', "${DERBY_NAME} Network Server")
    writeProperties(infoDir, 'net.properties', COPYRIGHT, derbyProps)
  }
}

def msgDir = "${projectDir}/src/main/resources/${locDir}"
def msgEnDir = "${sourceSets.main.java.outputDir}/${locDir}"

task buildMessages {
  dependsOn subprojectBase + 'snappydata-store-prebuild:jar', 'processResources', subprojectBase + 'snappydata-store-client:processResources'

  def msgXml = "${msgDir}/messages.xml"
  def msgEn = "${msgEnDir}/messages_en.properties"

  def msgEnDirF = file(msgEnDir)

  inputs.file msgXml
  outputs.file msgEn

  doLast {
    msgEnDirF.exists() || msgEnDirF.mkdirs()

    ant.taskdef(name: 'buildMessages',
        classname: 'org.apache.derbyBuild.MessageBuilder',
        classpath: project(subprojectBase + 'snappydata-store-prebuild').sourceSets.main.java.outputDir)

    ant.buildMessages(xmlSourceFile: msgXml, propertiesTargetFile: msgEn,
        ditaTargetFile: "${projectDir}/doc/rrefexcept71493.dita")
  }
}

def splitMessages(def msgFile, def msgDir) {
  def outDir = file(clientMsgOutDir)
  outDir.exists() || outDir.mkdirs()
  def msgPath = "${msgDir}/${msgFile}"
  javaexec {
    main = 'org.apache.derbyBuild.splitmessages'
    classpath = sourceSets.main.compileClasspath
    args = [ outDir, msgPath, '' /* unused */ ]
  }
}

// create the client messages files for various languages
task doSplit(dependsOn: buildMessages) {
  def msgXml = "${msgDir}/messages.xml"
  def clientResourceDir = "${project(subprojectBase + 'snappydata-store-client').sourceSets.main.java.outputDir}/${locDir}"

  inputs.file msgXml
  outputs.files "${msgEnDir}/m0_en.properties", "${clientResourceDir}/clientmessages_en.properties"

  doLast {
    splitMessages('messages_en.properties', msgEnDir)
    splitMessages('messages_cs.properties', msgDir)
    splitMessages('messages_de_DE.properties', msgDir)
    splitMessages('messages_es.properties', msgDir)
    splitMessages('messages_fr.properties', msgDir)
    splitMessages('messages_hu.properties', msgDir)
    splitMessages('messages_it.properties', msgDir)
    splitMessages('messages_ja_JP.properties', msgDir)
    splitMessages('messages_ko_KR.properties', msgDir)
    splitMessages('messages_qq_PP_testOnly.properties', msgDir)
    splitMessages('messages_pl.properties', msgDir)
    splitMessages('messages_pt_BR.properties', msgDir)
    splitMessages('messages_ru.properties', msgDir)
    splitMessages('messages_zh_CN.properties', msgDir)
    splitMessages('messages_zh_TW.properties', msgDir)

    // copy the clientmessages properties files to their proper place
    copy {
      from clientMsgOutDir
      into clientResourceDir
      include 'clientmessages*.properties'
    }
    // copy the remaining properties files to their place in engine jar
    copy {
      from clientMsgOutDir
      into msgEnDir
      include 'm*.properties'
    }
  }
}

task odbcMeta {
  dependsOn "${subprojectBase}snappydata-store-prebuild:processResources", 'processResources', "${subprojectBase}snappydata-store-prebuild:jar"
  def metaDir = file("${sourceSets.main.java.outputDir}/com/pivotal/gemfirexd/internal/impl/jdbc")
  outputs.file "${metaDir}/metadata.properties"
  inputs.dir "${projectDir}/../prebuild/src/main/resources/com/pivotal/gemfirexd/internal/impl/jdbc"
  inputs.dir "${projectDir}/../prebuild/src/main/java/org/apache/derbyBuild"

  doFirst {
    metaDir.mkdirs()
  }

  doLast {
    println('Creating ODBC metadata properties')
    javaexec {
      main = 'org.apache.derbyBuild.ODBCMetadataGenerator'
      classpath = sourceSets.main.compileClasspath
      workingDir = metaDir
    }
    // move generated odbc_metadata.properties as metadata.properties
    file("${metaDir}/odbc_metadata.properties").
      renameTo("${metaDir}/metadata.properties")

    javaexec {
      main = 'org.apache.derbyBuild.ODBCMetadataGenerator'
      args = ["metadata_lc.properties"]
      classpath = sourceSets.main.compileClasspath
      workingDir = metaDir
    }
    // move generated odbc_metadata_lc.properties as metadata_lc.properties
    file("${metaDir}/odbc_metadata_lc.properties").
        renameTo("${metaDir}/metadata_lc.properties")
  }
}

/*
task createClassSizeCatalog {
  def internalDir = 'com/pivotal/gemfirexd/internal'
  def internalOut = "${sourceSets.main.java.outputDir}/${internalDir}"

  // need to re-generate class size catalog if any of the classes below change
  inputs.files [ "${internalOut}/iapi/types/DataValueDescriptor.class",
    "${internalOut}/impl/services/cache/CachedItem.class",
    "${internalOut}/impl/store/raw/data/RecordId.class",
    "${internalOut}/iapi/store/raw/ContainerKey.class",
    "${internalOut}/iapi/services/cache/SizedCacheable.class" ]
  outputs.file "src/main/java/${internalDir}/iapi/services/cache/ClassSizeCatalog.java"

  def internalCP = 'com.pivotal.gemfirexd.internal'
  javaexec {
    main = 'org.apache.derbyBuild.ClassSizeCrawler'
    classpath = sourceSets.main.runtimeClasspath
    // TODO: SW: incomplete code ...
    args = [ "-DWS=${workspace}", "-DclassDir=${out.dir}", "-Dout=${derby.engine.src.dir}/${derby.dir}/iapi/services/cache/ClassSizeCatalog.java", "-Dprefix.1=${internalCP}.iapi.types", '-Dprefix.2=com.pivotal.gemfirexd.internal.impl, com.pivotal.gemfirexd.internal.iapi.types.DataValueDescriptor' ]
  }
}
*/

compileJava.dependsOn generatePropertiesFiles

// external javadocs
javadoc {
  include 'com/pivotal/gemfirexd/auth/callback/*.java'
  include 'com/pivotal/gemfirexd/callbacks/*.java'
  include 'com/pivotal/gemfirexd/jdbc/*.java'
  include 'com/pivotal/gemfirexd/load/*.java'
  include 'com/pivotal/gemfirexd/procedure/*.java'
  include 'com/pivotal/gemfirexd/tools/sizer/*.java'
  include 'com/pivotal/gemfirexd/hadoop/*.java'
  include 'com/pivotal/gemfirexd/hadoop/mapred/*.java'
  include 'com/pivotal/gemfirexd/hadoop/mapreduce/*.java'
  include 'com/pivotal/gemfirexd/*.java'
}
javadoc.dependsOn.clear()

shadowJar {
  dependsOn odbcMeta, doSplit, jar
  zip64 = true
  baseName = 'snappydata-store'
  classifier = ''

  mergeServiceFiles()
}

archivesBaseName = 'snappydata-store-core'

jar {
  dependsOn odbcMeta, doSplit
  baseName = 'snappydata-store-core'

  doLast {
    // copy the native JNI library
    if (osName.isLinux()) {
      copy {
        from "${projectDir}/lib"
        into "${buildDir}/libs"
      }
      def gemfireCoreProject = project("${subprojectBase}gemfire-core")
      copy {
        from "${projectDir}/lib"
        into "${gemfireCoreProject.buildDir}/libs"
      }
      copy {
        from "${projectDir}/lib"
        into gemfireCoreProject.sourceSets.main.java.outputDir
      }
    }
  }
}
