/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.snappydata.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2020-12-07")
public class CatalogStats implements org.apache.thrift.TBase<CatalogStats, CatalogStats._Fields>, java.io.Serializable, Cloneable, Comparable<CatalogStats> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CatalogStats");

  private static final org.apache.thrift.protocol.TField SIZE_IN_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("sizeInBytes", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField ROW_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("rowCount", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField COL_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("colStats", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CatalogStatsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CatalogStatsTupleSchemeFactory());
  }

  public long sizeInBytes; // required
  public long rowCount; // optional
  public List<Map<String,String>> colStats; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SIZE_IN_BYTES((short)1, "sizeInBytes"),
    ROW_COUNT((short)2, "rowCount"),
    COL_STATS((short)3, "colStats");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SIZE_IN_BYTES
          return SIZE_IN_BYTES;
        case 2: // ROW_COUNT
          return ROW_COUNT;
        case 3: // COL_STATS
          return COL_STATS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SIZEINBYTES_ISSET_ID = 0;
  private static final int __ROWCOUNT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ROW_COUNT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SIZE_IN_BYTES, new org.apache.thrift.meta_data.FieldMetaData("sizeInBytes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ROW_COUNT, new org.apache.thrift.meta_data.FieldMetaData("rowCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COL_STATS, new org.apache.thrift.meta_data.FieldMetaData("colStats", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CatalogStats.class, metaDataMap);
  }

  public CatalogStats() {
  }

  public CatalogStats(
    long sizeInBytes,
    List<Map<String,String>> colStats)
  {
    this();
    this.sizeInBytes = sizeInBytes;
    setSizeInBytesIsSet(true);
    this.colStats = colStats;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CatalogStats(CatalogStats other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sizeInBytes = other.sizeInBytes;
    this.rowCount = other.rowCount;
    if (other.isSetColStats()) {
      List<Map<String,String>> __this__colStats = new ArrayList<Map<String,String>>(other.colStats.size());
      for (Map<String,String> other_element : other.colStats) {
        Map<String,String> __this__colStats_copy = new HashMap<String,String>(other_element);
        __this__colStats.add(__this__colStats_copy);
      }
      this.colStats = __this__colStats;
    }
  }

  public CatalogStats deepCopy() {
    return new CatalogStats(this);
  }

  @Override
  public void clear() {
    setSizeInBytesIsSet(false);
    this.sizeInBytes = 0;
    setRowCountIsSet(false);
    this.rowCount = 0;
    this.colStats = null;
  }

  public long getSizeInBytes() {
    return this.sizeInBytes;
  }

  public CatalogStats setSizeInBytes(long sizeInBytes) {
    this.sizeInBytes = sizeInBytes;
    setSizeInBytesIsSet(true);
    return this;
  }

  public void unsetSizeInBytes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIZEINBYTES_ISSET_ID);
  }

  /** Returns true if field sizeInBytes is set (has been assigned a value) and false otherwise */
  public boolean isSetSizeInBytes() {
    return EncodingUtils.testBit(__isset_bitfield, __SIZEINBYTES_ISSET_ID);
  }

  public void setSizeInBytesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIZEINBYTES_ISSET_ID, value);
  }

  public long getRowCount() {
    return this.rowCount;
  }

  public CatalogStats setRowCount(long rowCount) {
    this.rowCount = rowCount;
    setRowCountIsSet(true);
    return this;
  }

  public void unsetRowCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWCOUNT_ISSET_ID);
  }

  /** Returns true if field rowCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRowCount() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWCOUNT_ISSET_ID);
  }

  public void setRowCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWCOUNT_ISSET_ID, value);
  }

  public int getColStatsSize() {
    return (this.colStats == null) ? 0 : this.colStats.size();
  }

  public java.util.Iterator<Map<String,String>> getColStatsIterator() {
    return (this.colStats == null) ? null : this.colStats.iterator();
  }

  public void addToColStats(Map<String,String> elem) {
    if (this.colStats == null) {
      this.colStats = new ArrayList<Map<String,String>>();
    }
    this.colStats.add(elem);
  }

  public List<Map<String,String>> getColStats() {
    return this.colStats;
  }

  public CatalogStats setColStats(List<Map<String,String>> colStats) {
    this.colStats = colStats;
    return this;
  }

  public void unsetColStats() {
    this.colStats = null;
  }

  /** Returns true if field colStats is set (has been assigned a value) and false otherwise */
  public boolean isSetColStats() {
    return this.colStats != null;
  }

  public void setColStatsIsSet(boolean value) {
    if (!value) {
      this.colStats = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SIZE_IN_BYTES:
      if (value == null) {
        unsetSizeInBytes();
      } else {
        setSizeInBytes((Long)value);
      }
      break;

    case ROW_COUNT:
      if (value == null) {
        unsetRowCount();
      } else {
        setRowCount((Long)value);
      }
      break;

    case COL_STATS:
      if (value == null) {
        unsetColStats();
      } else {
        setColStats((List<Map<String,String>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SIZE_IN_BYTES:
      return getSizeInBytes();

    case ROW_COUNT:
      return getRowCount();

    case COL_STATS:
      return getColStats();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SIZE_IN_BYTES:
      return isSetSizeInBytes();
    case ROW_COUNT:
      return isSetRowCount();
    case COL_STATS:
      return isSetColStats();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CatalogStats)
      return this.equals((CatalogStats)that);
    return false;
  }

  public boolean equals(CatalogStats that) {
    if (that == null)
      return false;

    boolean this_present_sizeInBytes = true;
    boolean that_present_sizeInBytes = true;
    if (this_present_sizeInBytes || that_present_sizeInBytes) {
      if (!(this_present_sizeInBytes && that_present_sizeInBytes))
        return false;
      if (this.sizeInBytes != that.sizeInBytes)
        return false;
    }

    boolean this_present_rowCount = true && this.isSetRowCount();
    boolean that_present_rowCount = true && that.isSetRowCount();
    if (this_present_rowCount || that_present_rowCount) {
      if (!(this_present_rowCount && that_present_rowCount))
        return false;
      if (this.rowCount != that.rowCount)
        return false;
    }

    boolean this_present_colStats = true && this.isSetColStats();
    boolean that_present_colStats = true && that.isSetColStats();
    if (this_present_colStats || that_present_colStats) {
      if (!(this_present_colStats && that_present_colStats))
        return false;
      if (!this.colStats.equals(that.colStats))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_sizeInBytes = true;
    list.add(present_sizeInBytes);
    if (present_sizeInBytes)
      list.add(sizeInBytes);

    boolean present_rowCount = true && (isSetRowCount());
    list.add(present_rowCount);
    if (present_rowCount)
      list.add(rowCount);

    boolean present_colStats = true && (isSetColStats());
    list.add(present_colStats);
    if (present_colStats)
      list.add(colStats);

    return list.hashCode();
  }

  @Override
  public int compareTo(CatalogStats other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSizeInBytes()).compareTo(other.isSetSizeInBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSizeInBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sizeInBytes, other.sizeInBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRowCount()).compareTo(other.isSetRowCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRowCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowCount, other.rowCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColStats()).compareTo(other.isSetColStats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColStats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.colStats, other.colStats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CatalogStats(");
    boolean first = true;

    sb.append("sizeInBytes:");
    sb.append(this.sizeInBytes);
    first = false;
    if (isSetRowCount()) {
      if (!first) sb.append(", ");
      sb.append("rowCount:");
      sb.append(this.rowCount);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("colStats:");
    if (this.colStats == null) {
      sb.append("null");
    } else {
      sb.append(this.colStats);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'sizeInBytes' because it's a primitive and you chose the non-beans generator.
    if (colStats == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'colStats' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CatalogStatsStandardSchemeFactory implements SchemeFactory {
    public CatalogStatsStandardScheme getScheme() {
      return new CatalogStatsStandardScheme();
    }
  }

  private static class CatalogStatsStandardScheme extends StandardScheme<CatalogStats> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CatalogStats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SIZE_IN_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sizeInBytes = iprot.readI64();
              struct.setSizeInBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROW_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rowCount = iprot.readI64();
              struct.setRowCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COL_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list298 = iprot.readListBegin();
                struct.colStats = new ArrayList<Map<String,String>>(_list298.size);
                Map<String,String> _elem299;
                for (int _i300 = 0; _i300 < _list298.size; ++_i300)
                {
                  {
                    org.apache.thrift.protocol.TMap _map301 = iprot.readMapBegin();
                    _elem299 = new HashMap<String,String>(2*_map301.size);
                    String _key302;
                    String _val303;
                    for (int _i304 = 0; _i304 < _map301.size; ++_i304)
                    {
                      _key302 = iprot.readString();
                      _val303 = iprot.readString();
                      _elem299.put(_key302, _val303);
                    }
                    iprot.readMapEnd();
                  }
                  struct.colStats.add(_elem299);
                }
                iprot.readListEnd();
              }
              struct.setColStatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSizeInBytes()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sizeInBytes' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CatalogStats struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SIZE_IN_BYTES_FIELD_DESC);
      oprot.writeI64(struct.sizeInBytes);
      oprot.writeFieldEnd();
      if (struct.isSetRowCount()) {
        oprot.writeFieldBegin(ROW_COUNT_FIELD_DESC);
        oprot.writeI64(struct.rowCount);
        oprot.writeFieldEnd();
      }
      if (struct.colStats != null) {
        oprot.writeFieldBegin(COL_STATS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.colStats.size()));
          for (Map<String,String> _iter305 : struct.colStats)
          {
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter305.size()));
              for (Map.Entry<String, String> _iter306 : _iter305.entrySet())
              {
                oprot.writeString(_iter306.getKey());
                oprot.writeString(_iter306.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CatalogStatsTupleSchemeFactory implements SchemeFactory {
    public CatalogStatsTupleScheme getScheme() {
      return new CatalogStatsTupleScheme();
    }
  }

  private static class CatalogStatsTupleScheme extends TupleScheme<CatalogStats> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CatalogStats struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.sizeInBytes);
      {
        oprot.writeI32(struct.colStats.size());
        for (Map<String,String> _iter307 : struct.colStats)
        {
          {
            oprot.writeI32(_iter307.size());
            for (Map.Entry<String, String> _iter308 : _iter307.entrySet())
            {
              oprot.writeString(_iter308.getKey());
              oprot.writeString(_iter308.getValue());
            }
          }
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetRowCount()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetRowCount()) {
        oprot.writeI64(struct.rowCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CatalogStats struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.sizeInBytes = iprot.readI64();
      struct.setSizeInBytesIsSet(true);
      {
        org.apache.thrift.protocol.TList _list309 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
        struct.colStats = new ArrayList<Map<String,String>>(_list309.size);
        Map<String,String> _elem310;
        for (int _i311 = 0; _i311 < _list309.size; ++_i311)
        {
          {
            org.apache.thrift.protocol.TMap _map312 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            _elem310 = new HashMap<String,String>(2*_map312.size);
            String _key313;
            String _val314;
            for (int _i315 = 0; _i315 < _map312.size; ++_i315)
            {
              _key313 = iprot.readString();
              _val314 = iprot.readString();
              _elem310.put(_key313, _val314);
            }
          }
          struct.colStats.add(_elem310);
        }
      }
      struct.setColStatsIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.rowCount = iprot.readI64();
        struct.setRowCountIsSet(true);
      }
    }
  }

}

