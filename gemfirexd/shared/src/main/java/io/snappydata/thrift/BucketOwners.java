/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.snappydata.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2020-12-07")
public class BucketOwners implements org.apache.thrift.TBase<BucketOwners, BucketOwners._Fields>, java.io.Serializable, Cloneable, Comparable<BucketOwners> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BucketOwners");

  private static final org.apache.thrift.protocol.TField BUCKET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PRIMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("primary", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SECONDARIES_FIELD_DESC = new org.apache.thrift.protocol.TField("secondaries", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BucketOwnersStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BucketOwnersTupleSchemeFactory());
  }

  public int bucketId; // required
  public String primary; // optional
  public List<String> secondaries; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BUCKET_ID((short)1, "bucketId"),
    PRIMARY((short)2, "primary"),
    SECONDARIES((short)3, "secondaries");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BUCKET_ID
          return BUCKET_ID;
        case 2: // PRIMARY
          return PRIMARY;
        case 3: // SECONDARIES
          return SECONDARIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BUCKETID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PRIMARY,_Fields.SECONDARIES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BUCKET_ID, new org.apache.thrift.meta_data.FieldMetaData("bucketId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRIMARY, new org.apache.thrift.meta_data.FieldMetaData("primary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SECONDARIES, new org.apache.thrift.meta_data.FieldMetaData("secondaries", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BucketOwners.class, metaDataMap);
  }

  public BucketOwners() {
  }

  public BucketOwners(
    int bucketId)
  {
    this();
    this.bucketId = bucketId;
    setBucketIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BucketOwners(BucketOwners other) {
    __isset_bitfield = other.__isset_bitfield;
    this.bucketId = other.bucketId;
    if (other.isSetPrimary()) {
      this.primary = other.primary;
    }
    if (other.isSetSecondaries()) {
      List<String> __this__secondaries = new ArrayList<String>(other.secondaries);
      this.secondaries = __this__secondaries;
    }
  }

  public BucketOwners deepCopy() {
    return new BucketOwners(this);
  }

  @Override
  public void clear() {
    setBucketIdIsSet(false);
    this.bucketId = 0;
    this.primary = null;
    this.secondaries = null;
  }

  public int getBucketId() {
    return this.bucketId;
  }

  public BucketOwners setBucketId(int bucketId) {
    this.bucketId = bucketId;
    setBucketIdIsSet(true);
    return this;
  }

  public void unsetBucketId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUCKETID_ISSET_ID);
  }

  /** Returns true if field bucketId is set (has been assigned a value) and false otherwise */
  public boolean isSetBucketId() {
    return EncodingUtils.testBit(__isset_bitfield, __BUCKETID_ISSET_ID);
  }

  public void setBucketIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUCKETID_ISSET_ID, value);
  }

  public String getPrimary() {
    return this.primary;
  }

  public BucketOwners setPrimary(String primary) {
    this.primary = primary;
    return this;
  }

  public void unsetPrimary() {
    this.primary = null;
  }

  /** Returns true if field primary is set (has been assigned a value) and false otherwise */
  public boolean isSetPrimary() {
    return this.primary != null;
  }

  public void setPrimaryIsSet(boolean value) {
    if (!value) {
      this.primary = null;
    }
  }

  public int getSecondariesSize() {
    return (this.secondaries == null) ? 0 : this.secondaries.size();
  }

  public java.util.Iterator<String> getSecondariesIterator() {
    return (this.secondaries == null) ? null : this.secondaries.iterator();
  }

  public void addToSecondaries(String elem) {
    if (this.secondaries == null) {
      this.secondaries = new ArrayList<String>();
    }
    this.secondaries.add(elem);
  }

  public List<String> getSecondaries() {
    return this.secondaries;
  }

  public BucketOwners setSecondaries(List<String> secondaries) {
    this.secondaries = secondaries;
    return this;
  }

  public void unsetSecondaries() {
    this.secondaries = null;
  }

  /** Returns true if field secondaries is set (has been assigned a value) and false otherwise */
  public boolean isSetSecondaries() {
    return this.secondaries != null;
  }

  public void setSecondariesIsSet(boolean value) {
    if (!value) {
      this.secondaries = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BUCKET_ID:
      if (value == null) {
        unsetBucketId();
      } else {
        setBucketId((Integer)value);
      }
      break;

    case PRIMARY:
      if (value == null) {
        unsetPrimary();
      } else {
        setPrimary((String)value);
      }
      break;

    case SECONDARIES:
      if (value == null) {
        unsetSecondaries();
      } else {
        setSecondaries((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BUCKET_ID:
      return getBucketId();

    case PRIMARY:
      return getPrimary();

    case SECONDARIES:
      return getSecondaries();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BUCKET_ID:
      return isSetBucketId();
    case PRIMARY:
      return isSetPrimary();
    case SECONDARIES:
      return isSetSecondaries();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BucketOwners)
      return this.equals((BucketOwners)that);
    return false;
  }

  public boolean equals(BucketOwners that) {
    if (that == null)
      return false;

    boolean this_present_bucketId = true;
    boolean that_present_bucketId = true;
    if (this_present_bucketId || that_present_bucketId) {
      if (!(this_present_bucketId && that_present_bucketId))
        return false;
      if (this.bucketId != that.bucketId)
        return false;
    }

    boolean this_present_primary = true && this.isSetPrimary();
    boolean that_present_primary = true && that.isSetPrimary();
    if (this_present_primary || that_present_primary) {
      if (!(this_present_primary && that_present_primary))
        return false;
      if (!this.primary.equals(that.primary))
        return false;
    }

    boolean this_present_secondaries = true && this.isSetSecondaries();
    boolean that_present_secondaries = true && that.isSetSecondaries();
    if (this_present_secondaries || that_present_secondaries) {
      if (!(this_present_secondaries && that_present_secondaries))
        return false;
      if (!this.secondaries.equals(that.secondaries))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_bucketId = true;
    list.add(present_bucketId);
    if (present_bucketId)
      list.add(bucketId);

    boolean present_primary = true && (isSetPrimary());
    list.add(present_primary);
    if (present_primary)
      list.add(primary);

    boolean present_secondaries = true && (isSetSecondaries());
    list.add(present_secondaries);
    if (present_secondaries)
      list.add(secondaries);

    return list.hashCode();
  }

  @Override
  public int compareTo(BucketOwners other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBucketId()).compareTo(other.isSetBucketId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBucketId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketId, other.bucketId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrimary()).compareTo(other.isSetPrimary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrimary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.primary, other.primary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecondaries()).compareTo(other.isSetSecondaries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecondaries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secondaries, other.secondaries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BucketOwners(");
    boolean first = true;

    sb.append("bucketId:");
    sb.append(this.bucketId);
    first = false;
    if (isSetPrimary()) {
      if (!first) sb.append(", ");
      sb.append("primary:");
      if (this.primary == null) {
        sb.append("null");
      } else {
        sb.append(this.primary);
      }
      first = false;
    }
    if (isSetSecondaries()) {
      if (!first) sb.append(", ");
      sb.append("secondaries:");
      if (this.secondaries == null) {
        sb.append("null");
      } else {
        sb.append(this.secondaries);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'bucketId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BucketOwnersStandardSchemeFactory implements SchemeFactory {
    public BucketOwnersStandardScheme getScheme() {
      return new BucketOwnersStandardScheme();
    }
  }

  private static class BucketOwnersStandardScheme extends StandardScheme<BucketOwners> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BucketOwners struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BUCKET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bucketId = iprot.readI32();
              struct.setBucketIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRIMARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.primary = iprot.readString();
              struct.setPrimaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SECONDARIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list270 = iprot.readListBegin();
                struct.secondaries = new ArrayList<String>(_list270.size);
                String _elem271;
                for (int _i272 = 0; _i272 < _list270.size; ++_i272)
                {
                  _elem271 = iprot.readString();
                  struct.secondaries.add(_elem271);
                }
                iprot.readListEnd();
              }
              struct.setSecondariesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetBucketId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'bucketId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BucketOwners struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BUCKET_ID_FIELD_DESC);
      oprot.writeI32(struct.bucketId);
      oprot.writeFieldEnd();
      if (struct.primary != null) {
        if (struct.isSetPrimary()) {
          oprot.writeFieldBegin(PRIMARY_FIELD_DESC);
          oprot.writeString(struct.primary);
          oprot.writeFieldEnd();
        }
      }
      if (struct.secondaries != null) {
        if (struct.isSetSecondaries()) {
          oprot.writeFieldBegin(SECONDARIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.secondaries.size()));
            for (String _iter273 : struct.secondaries)
            {
              oprot.writeString(_iter273);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BucketOwnersTupleSchemeFactory implements SchemeFactory {
    public BucketOwnersTupleScheme getScheme() {
      return new BucketOwnersTupleScheme();
    }
  }

  private static class BucketOwnersTupleScheme extends TupleScheme<BucketOwners> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BucketOwners struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.bucketId);
      BitSet optionals = new BitSet();
      if (struct.isSetPrimary()) {
        optionals.set(0);
      }
      if (struct.isSetSecondaries()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetPrimary()) {
        oprot.writeString(struct.primary);
      }
      if (struct.isSetSecondaries()) {
        {
          oprot.writeI32(struct.secondaries.size());
          for (String _iter274 : struct.secondaries)
          {
            oprot.writeString(_iter274);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BucketOwners struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.bucketId = iprot.readI32();
      struct.setBucketIdIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.primary = iprot.readString();
        struct.setPrimaryIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list275 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.secondaries = new ArrayList<String>(_list275.size);
          String _elem276;
          for (int _i277 = 0; _i277 < _list275.size; ++_i277)
          {
            _elem276 = iprot.readString();
            struct.secondaries.add(_elem276);
          }
        }
        struct.setSecondariesIsSet(true);
      }
    }
  }

}

