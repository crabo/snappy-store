/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.snappydata.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2020-12-07")
public class CatalogTableObject implements org.apache.thrift.TBase<CatalogTableObject, CatalogTableObject._Fields>, java.io.Serializable, Cloneable, Comparable<CatalogTableObject> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CatalogTableObject");

  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DATABASE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("databaseName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TABLE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("tableType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STORAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("storage", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField TABLE_SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("tableSchema", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PROVIDER_FIELD_DESC = new org.apache.thrift.protocol.TField("provider", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PARTITION_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("partitionColumns", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField INDEX_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("indexColumns", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField PRIMARY_KEY_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("primaryKeyColumns", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField NUM_BUCKETS_FIELD_DESC = new org.apache.thrift.protocol.TField("numBuckets", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField REDUNDANCY_FIELD_DESC = new org.apache.thrift.protocol.TField("redundancy", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField BUCKET_OWNERS_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketOwners", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField BUCKET_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketColumns", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField SORT_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("sortColumns", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField LAST_ACCESS_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastAccessTime", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.MAP, (short)18);
  private static final org.apache.thrift.protocol.TField STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("stats", org.apache.thrift.protocol.TType.STRUCT, (short)19);
  private static final org.apache.thrift.protocol.TField VIEW_ORIGINAL_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("viewOriginalText", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField VIEW_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("viewText", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField UNSUPPORTED_FEATURES_FIELD_DESC = new org.apache.thrift.protocol.TField("unsupportedFeatures", org.apache.thrift.protocol.TType.LIST, (short)23);
  private static final org.apache.thrift.protocol.TField TRACKS_PARTITIONS_IN_CATALOG_FIELD_DESC = new org.apache.thrift.protocol.TField("tracksPartitionsInCatalog", org.apache.thrift.protocol.TType.BOOL, (short)24);
  private static final org.apache.thrift.protocol.TField SCHEMA_PRESERVES_CASE_FIELD_DESC = new org.apache.thrift.protocol.TField("schemaPreservesCase", org.apache.thrift.protocol.TType.BOOL, (short)25);
  private static final org.apache.thrift.protocol.TField IGNORED_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("ignoredProperties", org.apache.thrift.protocol.TType.MAP, (short)26);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CatalogTableObjectStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CatalogTableObjectTupleSchemeFactory());
  }

  public String tableName; // required
  public String databaseName; // optional
  public String tableType; // required
  public CatalogStorage storage; // required
  public String tableSchema; // required
  public String provider; // optional
  public List<String> partitionColumns; // required
  public List<String> indexColumns; // required
  public List<String> primaryKeyColumns; // required
  public int numBuckets; // optional
  public int redundancy; // optional
  public List<BucketOwners> bucketOwners; // required
  public List<String> bucketColumns; // required
  public List<String> sortColumns; // required
  public String owner; // required
  public long createTime; // required
  public long lastAccessTime; // required
  public Map<String,String> properties; // required
  public CatalogStats stats; // optional
  public String viewOriginalText; // optional
  public String viewText; // optional
  public String comment; // optional
  public List<String> unsupportedFeatures; // required
  public boolean tracksPartitionsInCatalog; // required
  public boolean schemaPreservesCase; // required
  public Map<String,String> ignoredProperties; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_NAME((short)1, "tableName"),
    DATABASE_NAME((short)2, "databaseName"),
    TABLE_TYPE((short)3, "tableType"),
    STORAGE((short)4, "storage"),
    TABLE_SCHEMA((short)5, "tableSchema"),
    PROVIDER((short)6, "provider"),
    PARTITION_COLUMNS((short)7, "partitionColumns"),
    INDEX_COLUMNS((short)8, "indexColumns"),
    PRIMARY_KEY_COLUMNS((short)9, "primaryKeyColumns"),
    NUM_BUCKETS((short)10, "numBuckets"),
    REDUNDANCY((short)11, "redundancy"),
    BUCKET_OWNERS((short)12, "bucketOwners"),
    BUCKET_COLUMNS((short)13, "bucketColumns"),
    SORT_COLUMNS((short)14, "sortColumns"),
    OWNER((short)15, "owner"),
    CREATE_TIME((short)16, "createTime"),
    LAST_ACCESS_TIME((short)17, "lastAccessTime"),
    PROPERTIES((short)18, "properties"),
    STATS((short)19, "stats"),
    VIEW_ORIGINAL_TEXT((short)20, "viewOriginalText"),
    VIEW_TEXT((short)21, "viewText"),
    COMMENT((short)22, "comment"),
    UNSUPPORTED_FEATURES((short)23, "unsupportedFeatures"),
    TRACKS_PARTITIONS_IN_CATALOG((short)24, "tracksPartitionsInCatalog"),
    SCHEMA_PRESERVES_CASE((short)25, "schemaPreservesCase"),
    IGNORED_PROPERTIES((short)26, "ignoredProperties");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_NAME
          return TABLE_NAME;
        case 2: // DATABASE_NAME
          return DATABASE_NAME;
        case 3: // TABLE_TYPE
          return TABLE_TYPE;
        case 4: // STORAGE
          return STORAGE;
        case 5: // TABLE_SCHEMA
          return TABLE_SCHEMA;
        case 6: // PROVIDER
          return PROVIDER;
        case 7: // PARTITION_COLUMNS
          return PARTITION_COLUMNS;
        case 8: // INDEX_COLUMNS
          return INDEX_COLUMNS;
        case 9: // PRIMARY_KEY_COLUMNS
          return PRIMARY_KEY_COLUMNS;
        case 10: // NUM_BUCKETS
          return NUM_BUCKETS;
        case 11: // REDUNDANCY
          return REDUNDANCY;
        case 12: // BUCKET_OWNERS
          return BUCKET_OWNERS;
        case 13: // BUCKET_COLUMNS
          return BUCKET_COLUMNS;
        case 14: // SORT_COLUMNS
          return SORT_COLUMNS;
        case 15: // OWNER
          return OWNER;
        case 16: // CREATE_TIME
          return CREATE_TIME;
        case 17: // LAST_ACCESS_TIME
          return LAST_ACCESS_TIME;
        case 18: // PROPERTIES
          return PROPERTIES;
        case 19: // STATS
          return STATS;
        case 20: // VIEW_ORIGINAL_TEXT
          return VIEW_ORIGINAL_TEXT;
        case 21: // VIEW_TEXT
          return VIEW_TEXT;
        case 22: // COMMENT
          return COMMENT;
        case 23: // UNSUPPORTED_FEATURES
          return UNSUPPORTED_FEATURES;
        case 24: // TRACKS_PARTITIONS_IN_CATALOG
          return TRACKS_PARTITIONS_IN_CATALOG;
        case 25: // SCHEMA_PRESERVES_CASE
          return SCHEMA_PRESERVES_CASE;
        case 26: // IGNORED_PROPERTIES
          return IGNORED_PROPERTIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMBUCKETS_ISSET_ID = 0;
  private static final int __REDUNDANCY_ISSET_ID = 1;
  private static final int __CREATETIME_ISSET_ID = 2;
  private static final int __LASTACCESSTIME_ISSET_ID = 3;
  private static final int __TRACKSPARTITIONSINCATALOG_ISSET_ID = 4;
  private static final int __SCHEMAPRESERVESCASE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DATABASE_NAME,_Fields.PROVIDER,_Fields.NUM_BUCKETS,_Fields.REDUNDANCY,_Fields.STATS,_Fields.VIEW_ORIGINAL_TEXT,_Fields.VIEW_TEXT,_Fields.COMMENT,_Fields.IGNORED_PROPERTIES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATABASE_NAME, new org.apache.thrift.meta_data.FieldMetaData("databaseName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("tableType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STORAGE, new org.apache.thrift.meta_data.FieldMetaData("storage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CatalogStorage.class)));
    tmpMap.put(_Fields.TABLE_SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("tableSchema", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROVIDER, new org.apache.thrift.meta_data.FieldMetaData("provider", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTITION_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("partitionColumns", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.INDEX_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("indexColumns", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PRIMARY_KEY_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("primaryKeyColumns", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.NUM_BUCKETS, new org.apache.thrift.meta_data.FieldMetaData("numBuckets", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REDUNDANCY, new org.apache.thrift.meta_data.FieldMetaData("redundancy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUCKET_OWNERS, new org.apache.thrift.meta_data.FieldMetaData("bucketOwners", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BucketOwners.class))));
    tmpMap.put(_Fields.BUCKET_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("bucketColumns", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SORT_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("sortColumns", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_ACCESS_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastAccessTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.STATS, new org.apache.thrift.meta_data.FieldMetaData("stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CatalogStats.class)));
    tmpMap.put(_Fields.VIEW_ORIGINAL_TEXT, new org.apache.thrift.meta_data.FieldMetaData("viewOriginalText", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VIEW_TEXT, new org.apache.thrift.meta_data.FieldMetaData("viewText", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNSUPPORTED_FEATURES, new org.apache.thrift.meta_data.FieldMetaData("unsupportedFeatures", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TRACKS_PARTITIONS_IN_CATALOG, new org.apache.thrift.meta_data.FieldMetaData("tracksPartitionsInCatalog", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SCHEMA_PRESERVES_CASE, new org.apache.thrift.meta_data.FieldMetaData("schemaPreservesCase", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IGNORED_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("ignoredProperties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CatalogTableObject.class, metaDataMap);
  }

  public CatalogTableObject() {
  }

  public CatalogTableObject(
    String tableName,
    String tableType,
    CatalogStorage storage,
    String tableSchema,
    List<String> partitionColumns,
    List<String> indexColumns,
    List<String> primaryKeyColumns,
    List<BucketOwners> bucketOwners,
    List<String> bucketColumns,
    List<String> sortColumns,
    String owner,
    long createTime,
    long lastAccessTime,
    Map<String,String> properties,
    List<String> unsupportedFeatures,
    boolean tracksPartitionsInCatalog,
    boolean schemaPreservesCase)
  {
    this();
    this.tableName = tableName;
    this.tableType = tableType;
    this.storage = storage;
    this.tableSchema = tableSchema;
    this.partitionColumns = partitionColumns;
    this.indexColumns = indexColumns;
    this.primaryKeyColumns = primaryKeyColumns;
    this.bucketOwners = bucketOwners;
    this.bucketColumns = bucketColumns;
    this.sortColumns = sortColumns;
    this.owner = owner;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.lastAccessTime = lastAccessTime;
    setLastAccessTimeIsSet(true);
    this.properties = properties;
    this.unsupportedFeatures = unsupportedFeatures;
    this.tracksPartitionsInCatalog = tracksPartitionsInCatalog;
    setTracksPartitionsInCatalogIsSet(true);
    this.schemaPreservesCase = schemaPreservesCase;
    setSchemaPreservesCaseIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CatalogTableObject(CatalogTableObject other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTableName()) {
      this.tableName = other.tableName;
    }
    if (other.isSetDatabaseName()) {
      this.databaseName = other.databaseName;
    }
    if (other.isSetTableType()) {
      this.tableType = other.tableType;
    }
    if (other.isSetStorage()) {
      this.storage = new CatalogStorage(other.storage);
    }
    if (other.isSetTableSchema()) {
      this.tableSchema = other.tableSchema;
    }
    if (other.isSetProvider()) {
      this.provider = other.provider;
    }
    if (other.isSetPartitionColumns()) {
      List<String> __this__partitionColumns = new ArrayList<String>(other.partitionColumns);
      this.partitionColumns = __this__partitionColumns;
    }
    if (other.isSetIndexColumns()) {
      List<String> __this__indexColumns = new ArrayList<String>(other.indexColumns);
      this.indexColumns = __this__indexColumns;
    }
    if (other.isSetPrimaryKeyColumns()) {
      List<String> __this__primaryKeyColumns = new ArrayList<String>(other.primaryKeyColumns);
      this.primaryKeyColumns = __this__primaryKeyColumns;
    }
    this.numBuckets = other.numBuckets;
    this.redundancy = other.redundancy;
    if (other.isSetBucketOwners()) {
      List<BucketOwners> __this__bucketOwners = new ArrayList<BucketOwners>(other.bucketOwners.size());
      for (BucketOwners other_element : other.bucketOwners) {
        __this__bucketOwners.add(new BucketOwners(other_element));
      }
      this.bucketOwners = __this__bucketOwners;
    }
    if (other.isSetBucketColumns()) {
      List<String> __this__bucketColumns = new ArrayList<String>(other.bucketColumns);
      this.bucketColumns = __this__bucketColumns;
    }
    if (other.isSetSortColumns()) {
      List<String> __this__sortColumns = new ArrayList<String>(other.sortColumns);
      this.sortColumns = __this__sortColumns;
    }
    if (other.isSetOwner()) {
      this.owner = other.owner;
    }
    this.createTime = other.createTime;
    this.lastAccessTime = other.lastAccessTime;
    if (other.isSetProperties()) {
      Map<String,String> __this__properties = new HashMap<String,String>(other.properties);
      this.properties = __this__properties;
    }
    if (other.isSetStats()) {
      this.stats = new CatalogStats(other.stats);
    }
    if (other.isSetViewOriginalText()) {
      this.viewOriginalText = other.viewOriginalText;
    }
    if (other.isSetViewText()) {
      this.viewText = other.viewText;
    }
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
    if (other.isSetUnsupportedFeatures()) {
      List<String> __this__unsupportedFeatures = new ArrayList<String>(other.unsupportedFeatures);
      this.unsupportedFeatures = __this__unsupportedFeatures;
    }
    this.tracksPartitionsInCatalog = other.tracksPartitionsInCatalog;
    this.schemaPreservesCase = other.schemaPreservesCase;
    if (other.isSetIgnoredProperties()) {
      Map<String,String> __this__ignoredProperties = new HashMap<String,String>(other.ignoredProperties);
      this.ignoredProperties = __this__ignoredProperties;
    }
  }

  public CatalogTableObject deepCopy() {
    return new CatalogTableObject(this);
  }

  @Override
  public void clear() {
    this.tableName = null;
    this.databaseName = null;
    this.tableType = null;
    this.storage = null;
    this.tableSchema = null;
    this.provider = null;
    this.partitionColumns = null;
    this.indexColumns = null;
    this.primaryKeyColumns = null;
    setNumBucketsIsSet(false);
    this.numBuckets = 0;
    setRedundancyIsSet(false);
    this.redundancy = 0;
    this.bucketOwners = null;
    this.bucketColumns = null;
    this.sortColumns = null;
    this.owner = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setLastAccessTimeIsSet(false);
    this.lastAccessTime = 0;
    this.properties = null;
    this.stats = null;
    this.viewOriginalText = null;
    this.viewText = null;
    this.comment = null;
    this.unsupportedFeatures = null;
    setTracksPartitionsInCatalogIsSet(false);
    this.tracksPartitionsInCatalog = false;
    setSchemaPreservesCaseIsSet(false);
    this.schemaPreservesCase = false;
    this.ignoredProperties = null;
  }

  public String getTableName() {
    return this.tableName;
  }

  public CatalogTableObject setTableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  public void unsetTableName() {
    this.tableName = null;
  }

  /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
  public boolean isSetTableName() {
    return this.tableName != null;
  }

  public void setTableNameIsSet(boolean value) {
    if (!value) {
      this.tableName = null;
    }
  }

  public String getDatabaseName() {
    return this.databaseName;
  }

  public CatalogTableObject setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

  public void unsetDatabaseName() {
    this.databaseName = null;
  }

  /** Returns true if field databaseName is set (has been assigned a value) and false otherwise */
  public boolean isSetDatabaseName() {
    return this.databaseName != null;
  }

  public void setDatabaseNameIsSet(boolean value) {
    if (!value) {
      this.databaseName = null;
    }
  }

  public String getTableType() {
    return this.tableType;
  }

  public CatalogTableObject setTableType(String tableType) {
    this.tableType = tableType;
    return this;
  }

  public void unsetTableType() {
    this.tableType = null;
  }

  /** Returns true if field tableType is set (has been assigned a value) and false otherwise */
  public boolean isSetTableType() {
    return this.tableType != null;
  }

  public void setTableTypeIsSet(boolean value) {
    if (!value) {
      this.tableType = null;
    }
  }

  public CatalogStorage getStorage() {
    return this.storage;
  }

  public CatalogTableObject setStorage(CatalogStorage storage) {
    this.storage = storage;
    return this;
  }

  public void unsetStorage() {
    this.storage = null;
  }

  /** Returns true if field storage is set (has been assigned a value) and false otherwise */
  public boolean isSetStorage() {
    return this.storage != null;
  }

  public void setStorageIsSet(boolean value) {
    if (!value) {
      this.storage = null;
    }
  }

  public String getTableSchema() {
    return this.tableSchema;
  }

  public CatalogTableObject setTableSchema(String tableSchema) {
    this.tableSchema = tableSchema;
    return this;
  }

  public void unsetTableSchema() {
    this.tableSchema = null;
  }

  /** Returns true if field tableSchema is set (has been assigned a value) and false otherwise */
  public boolean isSetTableSchema() {
    return this.tableSchema != null;
  }

  public void setTableSchemaIsSet(boolean value) {
    if (!value) {
      this.tableSchema = null;
    }
  }

  public String getProvider() {
    return this.provider;
  }

  public CatalogTableObject setProvider(String provider) {
    this.provider = provider;
    return this;
  }

  public void unsetProvider() {
    this.provider = null;
  }

  /** Returns true if field provider is set (has been assigned a value) and false otherwise */
  public boolean isSetProvider() {
    return this.provider != null;
  }

  public void setProviderIsSet(boolean value) {
    if (!value) {
      this.provider = null;
    }
  }

  public int getPartitionColumnsSize() {
    return (this.partitionColumns == null) ? 0 : this.partitionColumns.size();
  }

  public java.util.Iterator<String> getPartitionColumnsIterator() {
    return (this.partitionColumns == null) ? null : this.partitionColumns.iterator();
  }

  public void addToPartitionColumns(String elem) {
    if (this.partitionColumns == null) {
      this.partitionColumns = new ArrayList<String>();
    }
    this.partitionColumns.add(elem);
  }

  public List<String> getPartitionColumns() {
    return this.partitionColumns;
  }

  public CatalogTableObject setPartitionColumns(List<String> partitionColumns) {
    this.partitionColumns = partitionColumns;
    return this;
  }

  public void unsetPartitionColumns() {
    this.partitionColumns = null;
  }

  /** Returns true if field partitionColumns is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitionColumns() {
    return this.partitionColumns != null;
  }

  public void setPartitionColumnsIsSet(boolean value) {
    if (!value) {
      this.partitionColumns = null;
    }
  }

  public int getIndexColumnsSize() {
    return (this.indexColumns == null) ? 0 : this.indexColumns.size();
  }

  public java.util.Iterator<String> getIndexColumnsIterator() {
    return (this.indexColumns == null) ? null : this.indexColumns.iterator();
  }

  public void addToIndexColumns(String elem) {
    if (this.indexColumns == null) {
      this.indexColumns = new ArrayList<String>();
    }
    this.indexColumns.add(elem);
  }

  public List<String> getIndexColumns() {
    return this.indexColumns;
  }

  public CatalogTableObject setIndexColumns(List<String> indexColumns) {
    this.indexColumns = indexColumns;
    return this;
  }

  public void unsetIndexColumns() {
    this.indexColumns = null;
  }

  /** Returns true if field indexColumns is set (has been assigned a value) and false otherwise */
  public boolean isSetIndexColumns() {
    return this.indexColumns != null;
  }

  public void setIndexColumnsIsSet(boolean value) {
    if (!value) {
      this.indexColumns = null;
    }
  }

  public int getPrimaryKeyColumnsSize() {
    return (this.primaryKeyColumns == null) ? 0 : this.primaryKeyColumns.size();
  }

  public java.util.Iterator<String> getPrimaryKeyColumnsIterator() {
    return (this.primaryKeyColumns == null) ? null : this.primaryKeyColumns.iterator();
  }

  public void addToPrimaryKeyColumns(String elem) {
    if (this.primaryKeyColumns == null) {
      this.primaryKeyColumns = new ArrayList<String>();
    }
    this.primaryKeyColumns.add(elem);
  }

  public List<String> getPrimaryKeyColumns() {
    return this.primaryKeyColumns;
  }

  public CatalogTableObject setPrimaryKeyColumns(List<String> primaryKeyColumns) {
    this.primaryKeyColumns = primaryKeyColumns;
    return this;
  }

  public void unsetPrimaryKeyColumns() {
    this.primaryKeyColumns = null;
  }

  /** Returns true if field primaryKeyColumns is set (has been assigned a value) and false otherwise */
  public boolean isSetPrimaryKeyColumns() {
    return this.primaryKeyColumns != null;
  }

  public void setPrimaryKeyColumnsIsSet(boolean value) {
    if (!value) {
      this.primaryKeyColumns = null;
    }
  }

  public int getNumBuckets() {
    return this.numBuckets;
  }

  public CatalogTableObject setNumBuckets(int numBuckets) {
    this.numBuckets = numBuckets;
    setNumBucketsIsSet(true);
    return this;
  }

  public void unsetNumBuckets() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBUCKETS_ISSET_ID);
  }

  /** Returns true if field numBuckets is set (has been assigned a value) and false otherwise */
  public boolean isSetNumBuckets() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBUCKETS_ISSET_ID);
  }

  public void setNumBucketsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBUCKETS_ISSET_ID, value);
  }

  public int getRedundancy() {
    return this.redundancy;
  }

  public CatalogTableObject setRedundancy(int redundancy) {
    this.redundancy = redundancy;
    setRedundancyIsSet(true);
    return this;
  }

  public void unsetRedundancy() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REDUNDANCY_ISSET_ID);
  }

  /** Returns true if field redundancy is set (has been assigned a value) and false otherwise */
  public boolean isSetRedundancy() {
    return EncodingUtils.testBit(__isset_bitfield, __REDUNDANCY_ISSET_ID);
  }

  public void setRedundancyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REDUNDANCY_ISSET_ID, value);
  }

  public int getBucketOwnersSize() {
    return (this.bucketOwners == null) ? 0 : this.bucketOwners.size();
  }

  public java.util.Iterator<BucketOwners> getBucketOwnersIterator() {
    return (this.bucketOwners == null) ? null : this.bucketOwners.iterator();
  }

  public void addToBucketOwners(BucketOwners elem) {
    if (this.bucketOwners == null) {
      this.bucketOwners = new ArrayList<BucketOwners>();
    }
    this.bucketOwners.add(elem);
  }

  public List<BucketOwners> getBucketOwners() {
    return this.bucketOwners;
  }

  public CatalogTableObject setBucketOwners(List<BucketOwners> bucketOwners) {
    this.bucketOwners = bucketOwners;
    return this;
  }

  public void unsetBucketOwners() {
    this.bucketOwners = null;
  }

  /** Returns true if field bucketOwners is set (has been assigned a value) and false otherwise */
  public boolean isSetBucketOwners() {
    return this.bucketOwners != null;
  }

  public void setBucketOwnersIsSet(boolean value) {
    if (!value) {
      this.bucketOwners = null;
    }
  }

  public int getBucketColumnsSize() {
    return (this.bucketColumns == null) ? 0 : this.bucketColumns.size();
  }

  public java.util.Iterator<String> getBucketColumnsIterator() {
    return (this.bucketColumns == null) ? null : this.bucketColumns.iterator();
  }

  public void addToBucketColumns(String elem) {
    if (this.bucketColumns == null) {
      this.bucketColumns = new ArrayList<String>();
    }
    this.bucketColumns.add(elem);
  }

  public List<String> getBucketColumns() {
    return this.bucketColumns;
  }

  public CatalogTableObject setBucketColumns(List<String> bucketColumns) {
    this.bucketColumns = bucketColumns;
    return this;
  }

  public void unsetBucketColumns() {
    this.bucketColumns = null;
  }

  /** Returns true if field bucketColumns is set (has been assigned a value) and false otherwise */
  public boolean isSetBucketColumns() {
    return this.bucketColumns != null;
  }

  public void setBucketColumnsIsSet(boolean value) {
    if (!value) {
      this.bucketColumns = null;
    }
  }

  public int getSortColumnsSize() {
    return (this.sortColumns == null) ? 0 : this.sortColumns.size();
  }

  public java.util.Iterator<String> getSortColumnsIterator() {
    return (this.sortColumns == null) ? null : this.sortColumns.iterator();
  }

  public void addToSortColumns(String elem) {
    if (this.sortColumns == null) {
      this.sortColumns = new ArrayList<String>();
    }
    this.sortColumns.add(elem);
  }

  public List<String> getSortColumns() {
    return this.sortColumns;
  }

  public CatalogTableObject setSortColumns(List<String> sortColumns) {
    this.sortColumns = sortColumns;
    return this;
  }

  public void unsetSortColumns() {
    this.sortColumns = null;
  }

  /** Returns true if field sortColumns is set (has been assigned a value) and false otherwise */
  public boolean isSetSortColumns() {
    return this.sortColumns != null;
  }

  public void setSortColumnsIsSet(boolean value) {
    if (!value) {
      this.sortColumns = null;
    }
  }

  public String getOwner() {
    return this.owner;
  }

  public CatalogTableObject setOwner(String owner) {
    this.owner = owner;
    return this;
  }

  public void unsetOwner() {
    this.owner = null;
  }

  /** Returns true if field owner is set (has been assigned a value) and false otherwise */
  public boolean isSetOwner() {
    return this.owner != null;
  }

  public void setOwnerIsSet(boolean value) {
    if (!value) {
      this.owner = null;
    }
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public CatalogTableObject setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public long getLastAccessTime() {
    return this.lastAccessTime;
  }

  public CatalogTableObject setLastAccessTime(long lastAccessTime) {
    this.lastAccessTime = lastAccessTime;
    setLastAccessTimeIsSet(true);
    return this;
  }

  public void unsetLastAccessTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTACCESSTIME_ISSET_ID);
  }

  /** Returns true if field lastAccessTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastAccessTime() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTACCESSTIME_ISSET_ID);
  }

  public void setLastAccessTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTACCESSTIME_ISSET_ID, value);
  }

  public int getPropertiesSize() {
    return (this.properties == null) ? 0 : this.properties.size();
  }

  public void putToProperties(String key, String val) {
    if (this.properties == null) {
      this.properties = new HashMap<String,String>();
    }
    this.properties.put(key, val);
  }

  public Map<String,String> getProperties() {
    return this.properties;
  }

  public CatalogTableObject setProperties(Map<String,String> properties) {
    this.properties = properties;
    return this;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  /** Returns true if field properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  public CatalogStats getStats() {
    return this.stats;
  }

  public CatalogTableObject setStats(CatalogStats stats) {
    this.stats = stats;
    return this;
  }

  public void unsetStats() {
    this.stats = null;
  }

  /** Returns true if field stats is set (has been assigned a value) and false otherwise */
  public boolean isSetStats() {
    return this.stats != null;
  }

  public void setStatsIsSet(boolean value) {
    if (!value) {
      this.stats = null;
    }
  }

  public String getViewOriginalText() {
    return this.viewOriginalText;
  }

  public CatalogTableObject setViewOriginalText(String viewOriginalText) {
    this.viewOriginalText = viewOriginalText;
    return this;
  }

  public void unsetViewOriginalText() {
    this.viewOriginalText = null;
  }

  /** Returns true if field viewOriginalText is set (has been assigned a value) and false otherwise */
  public boolean isSetViewOriginalText() {
    return this.viewOriginalText != null;
  }

  public void setViewOriginalTextIsSet(boolean value) {
    if (!value) {
      this.viewOriginalText = null;
    }
  }

  public String getViewText() {
    return this.viewText;
  }

  public CatalogTableObject setViewText(String viewText) {
    this.viewText = viewText;
    return this;
  }

  public void unsetViewText() {
    this.viewText = null;
  }

  /** Returns true if field viewText is set (has been assigned a value) and false otherwise */
  public boolean isSetViewText() {
    return this.viewText != null;
  }

  public void setViewTextIsSet(boolean value) {
    if (!value) {
      this.viewText = null;
    }
  }

  public String getComment() {
    return this.comment;
  }

  public CatalogTableObject setComment(String comment) {
    this.comment = comment;
    return this;
  }

  public void unsetComment() {
    this.comment = null;
  }

  /** Returns true if field comment is set (has been assigned a value) and false otherwise */
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  public int getUnsupportedFeaturesSize() {
    return (this.unsupportedFeatures == null) ? 0 : this.unsupportedFeatures.size();
  }

  public java.util.Iterator<String> getUnsupportedFeaturesIterator() {
    return (this.unsupportedFeatures == null) ? null : this.unsupportedFeatures.iterator();
  }

  public void addToUnsupportedFeatures(String elem) {
    if (this.unsupportedFeatures == null) {
      this.unsupportedFeatures = new ArrayList<String>();
    }
    this.unsupportedFeatures.add(elem);
  }

  public List<String> getUnsupportedFeatures() {
    return this.unsupportedFeatures;
  }

  public CatalogTableObject setUnsupportedFeatures(List<String> unsupportedFeatures) {
    this.unsupportedFeatures = unsupportedFeatures;
    return this;
  }

  public void unsetUnsupportedFeatures() {
    this.unsupportedFeatures = null;
  }

  /** Returns true if field unsupportedFeatures is set (has been assigned a value) and false otherwise */
  public boolean isSetUnsupportedFeatures() {
    return this.unsupportedFeatures != null;
  }

  public void setUnsupportedFeaturesIsSet(boolean value) {
    if (!value) {
      this.unsupportedFeatures = null;
    }
  }

  public boolean isTracksPartitionsInCatalog() {
    return this.tracksPartitionsInCatalog;
  }

  public CatalogTableObject setTracksPartitionsInCatalog(boolean tracksPartitionsInCatalog) {
    this.tracksPartitionsInCatalog = tracksPartitionsInCatalog;
    setTracksPartitionsInCatalogIsSet(true);
    return this;
  }

  public void unsetTracksPartitionsInCatalog() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRACKSPARTITIONSINCATALOG_ISSET_ID);
  }

  /** Returns true if field tracksPartitionsInCatalog is set (has been assigned a value) and false otherwise */
  public boolean isSetTracksPartitionsInCatalog() {
    return EncodingUtils.testBit(__isset_bitfield, __TRACKSPARTITIONSINCATALOG_ISSET_ID);
  }

  public void setTracksPartitionsInCatalogIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRACKSPARTITIONSINCATALOG_ISSET_ID, value);
  }

  public boolean isSchemaPreservesCase() {
    return this.schemaPreservesCase;
  }

  public CatalogTableObject setSchemaPreservesCase(boolean schemaPreservesCase) {
    this.schemaPreservesCase = schemaPreservesCase;
    setSchemaPreservesCaseIsSet(true);
    return this;
  }

  public void unsetSchemaPreservesCase() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCHEMAPRESERVESCASE_ISSET_ID);
  }

  /** Returns true if field schemaPreservesCase is set (has been assigned a value) and false otherwise */
  public boolean isSetSchemaPreservesCase() {
    return EncodingUtils.testBit(__isset_bitfield, __SCHEMAPRESERVESCASE_ISSET_ID);
  }

  public void setSchemaPreservesCaseIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCHEMAPRESERVESCASE_ISSET_ID, value);
  }

  public int getIgnoredPropertiesSize() {
    return (this.ignoredProperties == null) ? 0 : this.ignoredProperties.size();
  }

  public void putToIgnoredProperties(String key, String val) {
    if (this.ignoredProperties == null) {
      this.ignoredProperties = new HashMap<String,String>();
    }
    this.ignoredProperties.put(key, val);
  }

  public Map<String,String> getIgnoredProperties() {
    return this.ignoredProperties;
  }

  public CatalogTableObject setIgnoredProperties(Map<String,String> ignoredProperties) {
    this.ignoredProperties = ignoredProperties;
    return this;
  }

  public void unsetIgnoredProperties() {
    this.ignoredProperties = null;
  }

  /** Returns true if field ignoredProperties is set (has been assigned a value) and false otherwise */
  public boolean isSetIgnoredProperties() {
    return this.ignoredProperties != null;
  }

  public void setIgnoredPropertiesIsSet(boolean value) {
    if (!value) {
      this.ignoredProperties = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TABLE_NAME:
      if (value == null) {
        unsetTableName();
      } else {
        setTableName((String)value);
      }
      break;

    case DATABASE_NAME:
      if (value == null) {
        unsetDatabaseName();
      } else {
        setDatabaseName((String)value);
      }
      break;

    case TABLE_TYPE:
      if (value == null) {
        unsetTableType();
      } else {
        setTableType((String)value);
      }
      break;

    case STORAGE:
      if (value == null) {
        unsetStorage();
      } else {
        setStorage((CatalogStorage)value);
      }
      break;

    case TABLE_SCHEMA:
      if (value == null) {
        unsetTableSchema();
      } else {
        setTableSchema((String)value);
      }
      break;

    case PROVIDER:
      if (value == null) {
        unsetProvider();
      } else {
        setProvider((String)value);
      }
      break;

    case PARTITION_COLUMNS:
      if (value == null) {
        unsetPartitionColumns();
      } else {
        setPartitionColumns((List<String>)value);
      }
      break;

    case INDEX_COLUMNS:
      if (value == null) {
        unsetIndexColumns();
      } else {
        setIndexColumns((List<String>)value);
      }
      break;

    case PRIMARY_KEY_COLUMNS:
      if (value == null) {
        unsetPrimaryKeyColumns();
      } else {
        setPrimaryKeyColumns((List<String>)value);
      }
      break;

    case NUM_BUCKETS:
      if (value == null) {
        unsetNumBuckets();
      } else {
        setNumBuckets((Integer)value);
      }
      break;

    case REDUNDANCY:
      if (value == null) {
        unsetRedundancy();
      } else {
        setRedundancy((Integer)value);
      }
      break;

    case BUCKET_OWNERS:
      if (value == null) {
        unsetBucketOwners();
      } else {
        setBucketOwners((List<BucketOwners>)value);
      }
      break;

    case BUCKET_COLUMNS:
      if (value == null) {
        unsetBucketColumns();
      } else {
        setBucketColumns((List<String>)value);
      }
      break;

    case SORT_COLUMNS:
      if (value == null) {
        unsetSortColumns();
      } else {
        setSortColumns((List<String>)value);
      }
      break;

    case OWNER:
      if (value == null) {
        unsetOwner();
      } else {
        setOwner((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case LAST_ACCESS_TIME:
      if (value == null) {
        unsetLastAccessTime();
      } else {
        setLastAccessTime((Long)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((Map<String,String>)value);
      }
      break;

    case STATS:
      if (value == null) {
        unsetStats();
      } else {
        setStats((CatalogStats)value);
      }
      break;

    case VIEW_ORIGINAL_TEXT:
      if (value == null) {
        unsetViewOriginalText();
      } else {
        setViewOriginalText((String)value);
      }
      break;

    case VIEW_TEXT:
      if (value == null) {
        unsetViewText();
      } else {
        setViewText((String)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((String)value);
      }
      break;

    case UNSUPPORTED_FEATURES:
      if (value == null) {
        unsetUnsupportedFeatures();
      } else {
        setUnsupportedFeatures((List<String>)value);
      }
      break;

    case TRACKS_PARTITIONS_IN_CATALOG:
      if (value == null) {
        unsetTracksPartitionsInCatalog();
      } else {
        setTracksPartitionsInCatalog((Boolean)value);
      }
      break;

    case SCHEMA_PRESERVES_CASE:
      if (value == null) {
        unsetSchemaPreservesCase();
      } else {
        setSchemaPreservesCase((Boolean)value);
      }
      break;

    case IGNORED_PROPERTIES:
      if (value == null) {
        unsetIgnoredProperties();
      } else {
        setIgnoredProperties((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_NAME:
      return getTableName();

    case DATABASE_NAME:
      return getDatabaseName();

    case TABLE_TYPE:
      return getTableType();

    case STORAGE:
      return getStorage();

    case TABLE_SCHEMA:
      return getTableSchema();

    case PROVIDER:
      return getProvider();

    case PARTITION_COLUMNS:
      return getPartitionColumns();

    case INDEX_COLUMNS:
      return getIndexColumns();

    case PRIMARY_KEY_COLUMNS:
      return getPrimaryKeyColumns();

    case NUM_BUCKETS:
      return getNumBuckets();

    case REDUNDANCY:
      return getRedundancy();

    case BUCKET_OWNERS:
      return getBucketOwners();

    case BUCKET_COLUMNS:
      return getBucketColumns();

    case SORT_COLUMNS:
      return getSortColumns();

    case OWNER:
      return getOwner();

    case CREATE_TIME:
      return getCreateTime();

    case LAST_ACCESS_TIME:
      return getLastAccessTime();

    case PROPERTIES:
      return getProperties();

    case STATS:
      return getStats();

    case VIEW_ORIGINAL_TEXT:
      return getViewOriginalText();

    case VIEW_TEXT:
      return getViewText();

    case COMMENT:
      return getComment();

    case UNSUPPORTED_FEATURES:
      return getUnsupportedFeatures();

    case TRACKS_PARTITIONS_IN_CATALOG:
      return isTracksPartitionsInCatalog();

    case SCHEMA_PRESERVES_CASE:
      return isSchemaPreservesCase();

    case IGNORED_PROPERTIES:
      return getIgnoredProperties();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TABLE_NAME:
      return isSetTableName();
    case DATABASE_NAME:
      return isSetDatabaseName();
    case TABLE_TYPE:
      return isSetTableType();
    case STORAGE:
      return isSetStorage();
    case TABLE_SCHEMA:
      return isSetTableSchema();
    case PROVIDER:
      return isSetProvider();
    case PARTITION_COLUMNS:
      return isSetPartitionColumns();
    case INDEX_COLUMNS:
      return isSetIndexColumns();
    case PRIMARY_KEY_COLUMNS:
      return isSetPrimaryKeyColumns();
    case NUM_BUCKETS:
      return isSetNumBuckets();
    case REDUNDANCY:
      return isSetRedundancy();
    case BUCKET_OWNERS:
      return isSetBucketOwners();
    case BUCKET_COLUMNS:
      return isSetBucketColumns();
    case SORT_COLUMNS:
      return isSetSortColumns();
    case OWNER:
      return isSetOwner();
    case CREATE_TIME:
      return isSetCreateTime();
    case LAST_ACCESS_TIME:
      return isSetLastAccessTime();
    case PROPERTIES:
      return isSetProperties();
    case STATS:
      return isSetStats();
    case VIEW_ORIGINAL_TEXT:
      return isSetViewOriginalText();
    case VIEW_TEXT:
      return isSetViewText();
    case COMMENT:
      return isSetComment();
    case UNSUPPORTED_FEATURES:
      return isSetUnsupportedFeatures();
    case TRACKS_PARTITIONS_IN_CATALOG:
      return isSetTracksPartitionsInCatalog();
    case SCHEMA_PRESERVES_CASE:
      return isSetSchemaPreservesCase();
    case IGNORED_PROPERTIES:
      return isSetIgnoredProperties();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CatalogTableObject)
      return this.equals((CatalogTableObject)that);
    return false;
  }

  public boolean equals(CatalogTableObject that) {
    if (that == null)
      return false;

    boolean this_present_tableName = true && this.isSetTableName();
    boolean that_present_tableName = true && that.isSetTableName();
    if (this_present_tableName || that_present_tableName) {
      if (!(this_present_tableName && that_present_tableName))
        return false;
      if (!this.tableName.equals(that.tableName))
        return false;
    }

    boolean this_present_databaseName = true && this.isSetDatabaseName();
    boolean that_present_databaseName = true && that.isSetDatabaseName();
    if (this_present_databaseName || that_present_databaseName) {
      if (!(this_present_databaseName && that_present_databaseName))
        return false;
      if (!this.databaseName.equals(that.databaseName))
        return false;
    }

    boolean this_present_tableType = true && this.isSetTableType();
    boolean that_present_tableType = true && that.isSetTableType();
    if (this_present_tableType || that_present_tableType) {
      if (!(this_present_tableType && that_present_tableType))
        return false;
      if (!this.tableType.equals(that.tableType))
        return false;
    }

    boolean this_present_storage = true && this.isSetStorage();
    boolean that_present_storage = true && that.isSetStorage();
    if (this_present_storage || that_present_storage) {
      if (!(this_present_storage && that_present_storage))
        return false;
      if (!this.storage.equals(that.storage))
        return false;
    }

    boolean this_present_tableSchema = true && this.isSetTableSchema();
    boolean that_present_tableSchema = true && that.isSetTableSchema();
    if (this_present_tableSchema || that_present_tableSchema) {
      if (!(this_present_tableSchema && that_present_tableSchema))
        return false;
      if (!this.tableSchema.equals(that.tableSchema))
        return false;
    }

    boolean this_present_provider = true && this.isSetProvider();
    boolean that_present_provider = true && that.isSetProvider();
    if (this_present_provider || that_present_provider) {
      if (!(this_present_provider && that_present_provider))
        return false;
      if (!this.provider.equals(that.provider))
        return false;
    }

    boolean this_present_partitionColumns = true && this.isSetPartitionColumns();
    boolean that_present_partitionColumns = true && that.isSetPartitionColumns();
    if (this_present_partitionColumns || that_present_partitionColumns) {
      if (!(this_present_partitionColumns && that_present_partitionColumns))
        return false;
      if (!this.partitionColumns.equals(that.partitionColumns))
        return false;
    }

    boolean this_present_indexColumns = true && this.isSetIndexColumns();
    boolean that_present_indexColumns = true && that.isSetIndexColumns();
    if (this_present_indexColumns || that_present_indexColumns) {
      if (!(this_present_indexColumns && that_present_indexColumns))
        return false;
      if (!this.indexColumns.equals(that.indexColumns))
        return false;
    }

    boolean this_present_primaryKeyColumns = true && this.isSetPrimaryKeyColumns();
    boolean that_present_primaryKeyColumns = true && that.isSetPrimaryKeyColumns();
    if (this_present_primaryKeyColumns || that_present_primaryKeyColumns) {
      if (!(this_present_primaryKeyColumns && that_present_primaryKeyColumns))
        return false;
      if (!this.primaryKeyColumns.equals(that.primaryKeyColumns))
        return false;
    }

    boolean this_present_numBuckets = true && this.isSetNumBuckets();
    boolean that_present_numBuckets = true && that.isSetNumBuckets();
    if (this_present_numBuckets || that_present_numBuckets) {
      if (!(this_present_numBuckets && that_present_numBuckets))
        return false;
      if (this.numBuckets != that.numBuckets)
        return false;
    }

    boolean this_present_redundancy = true && this.isSetRedundancy();
    boolean that_present_redundancy = true && that.isSetRedundancy();
    if (this_present_redundancy || that_present_redundancy) {
      if (!(this_present_redundancy && that_present_redundancy))
        return false;
      if (this.redundancy != that.redundancy)
        return false;
    }

    boolean this_present_bucketOwners = true && this.isSetBucketOwners();
    boolean that_present_bucketOwners = true && that.isSetBucketOwners();
    if (this_present_bucketOwners || that_present_bucketOwners) {
      if (!(this_present_bucketOwners && that_present_bucketOwners))
        return false;
      if (!this.bucketOwners.equals(that.bucketOwners))
        return false;
    }

    boolean this_present_bucketColumns = true && this.isSetBucketColumns();
    boolean that_present_bucketColumns = true && that.isSetBucketColumns();
    if (this_present_bucketColumns || that_present_bucketColumns) {
      if (!(this_present_bucketColumns && that_present_bucketColumns))
        return false;
      if (!this.bucketColumns.equals(that.bucketColumns))
        return false;
    }

    boolean this_present_sortColumns = true && this.isSetSortColumns();
    boolean that_present_sortColumns = true && that.isSetSortColumns();
    if (this_present_sortColumns || that_present_sortColumns) {
      if (!(this_present_sortColumns && that_present_sortColumns))
        return false;
      if (!this.sortColumns.equals(that.sortColumns))
        return false;
    }

    boolean this_present_owner = true && this.isSetOwner();
    boolean that_present_owner = true && that.isSetOwner();
    if (this_present_owner || that_present_owner) {
      if (!(this_present_owner && that_present_owner))
        return false;
      if (!this.owner.equals(that.owner))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_lastAccessTime = true;
    boolean that_present_lastAccessTime = true;
    if (this_present_lastAccessTime || that_present_lastAccessTime) {
      if (!(this_present_lastAccessTime && that_present_lastAccessTime))
        return false;
      if (this.lastAccessTime != that.lastAccessTime)
        return false;
    }

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!this.properties.equals(that.properties))
        return false;
    }

    boolean this_present_stats = true && this.isSetStats();
    boolean that_present_stats = true && that.isSetStats();
    if (this_present_stats || that_present_stats) {
      if (!(this_present_stats && that_present_stats))
        return false;
      if (!this.stats.equals(that.stats))
        return false;
    }

    boolean this_present_viewOriginalText = true && this.isSetViewOriginalText();
    boolean that_present_viewOriginalText = true && that.isSetViewOriginalText();
    if (this_present_viewOriginalText || that_present_viewOriginalText) {
      if (!(this_present_viewOriginalText && that_present_viewOriginalText))
        return false;
      if (!this.viewOriginalText.equals(that.viewOriginalText))
        return false;
    }

    boolean this_present_viewText = true && this.isSetViewText();
    boolean that_present_viewText = true && that.isSetViewText();
    if (this_present_viewText || that_present_viewText) {
      if (!(this_present_viewText && that_present_viewText))
        return false;
      if (!this.viewText.equals(that.viewText))
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    boolean this_present_unsupportedFeatures = true && this.isSetUnsupportedFeatures();
    boolean that_present_unsupportedFeatures = true && that.isSetUnsupportedFeatures();
    if (this_present_unsupportedFeatures || that_present_unsupportedFeatures) {
      if (!(this_present_unsupportedFeatures && that_present_unsupportedFeatures))
        return false;
      if (!this.unsupportedFeatures.equals(that.unsupportedFeatures))
        return false;
    }

    boolean this_present_tracksPartitionsInCatalog = true;
    boolean that_present_tracksPartitionsInCatalog = true;
    if (this_present_tracksPartitionsInCatalog || that_present_tracksPartitionsInCatalog) {
      if (!(this_present_tracksPartitionsInCatalog && that_present_tracksPartitionsInCatalog))
        return false;
      if (this.tracksPartitionsInCatalog != that.tracksPartitionsInCatalog)
        return false;
    }

    boolean this_present_schemaPreservesCase = true;
    boolean that_present_schemaPreservesCase = true;
    if (this_present_schemaPreservesCase || that_present_schemaPreservesCase) {
      if (!(this_present_schemaPreservesCase && that_present_schemaPreservesCase))
        return false;
      if (this.schemaPreservesCase != that.schemaPreservesCase)
        return false;
    }

    boolean this_present_ignoredProperties = true && this.isSetIgnoredProperties();
    boolean that_present_ignoredProperties = true && that.isSetIgnoredProperties();
    if (this_present_ignoredProperties || that_present_ignoredProperties) {
      if (!(this_present_ignoredProperties && that_present_ignoredProperties))
        return false;
      if (!this.ignoredProperties.equals(that.ignoredProperties))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_tableName = true && (isSetTableName());
    list.add(present_tableName);
    if (present_tableName)
      list.add(tableName);

    boolean present_databaseName = true && (isSetDatabaseName());
    list.add(present_databaseName);
    if (present_databaseName)
      list.add(databaseName);

    boolean present_tableType = true && (isSetTableType());
    list.add(present_tableType);
    if (present_tableType)
      list.add(tableType);

    boolean present_storage = true && (isSetStorage());
    list.add(present_storage);
    if (present_storage)
      list.add(storage);

    boolean present_tableSchema = true && (isSetTableSchema());
    list.add(present_tableSchema);
    if (present_tableSchema)
      list.add(tableSchema);

    boolean present_provider = true && (isSetProvider());
    list.add(present_provider);
    if (present_provider)
      list.add(provider);

    boolean present_partitionColumns = true && (isSetPartitionColumns());
    list.add(present_partitionColumns);
    if (present_partitionColumns)
      list.add(partitionColumns);

    boolean present_indexColumns = true && (isSetIndexColumns());
    list.add(present_indexColumns);
    if (present_indexColumns)
      list.add(indexColumns);

    boolean present_primaryKeyColumns = true && (isSetPrimaryKeyColumns());
    list.add(present_primaryKeyColumns);
    if (present_primaryKeyColumns)
      list.add(primaryKeyColumns);

    boolean present_numBuckets = true && (isSetNumBuckets());
    list.add(present_numBuckets);
    if (present_numBuckets)
      list.add(numBuckets);

    boolean present_redundancy = true && (isSetRedundancy());
    list.add(present_redundancy);
    if (present_redundancy)
      list.add(redundancy);

    boolean present_bucketOwners = true && (isSetBucketOwners());
    list.add(present_bucketOwners);
    if (present_bucketOwners)
      list.add(bucketOwners);

    boolean present_bucketColumns = true && (isSetBucketColumns());
    list.add(present_bucketColumns);
    if (present_bucketColumns)
      list.add(bucketColumns);

    boolean present_sortColumns = true && (isSetSortColumns());
    list.add(present_sortColumns);
    if (present_sortColumns)
      list.add(sortColumns);

    boolean present_owner = true && (isSetOwner());
    list.add(present_owner);
    if (present_owner)
      list.add(owner);

    boolean present_createTime = true;
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_lastAccessTime = true;
    list.add(present_lastAccessTime);
    if (present_lastAccessTime)
      list.add(lastAccessTime);

    boolean present_properties = true && (isSetProperties());
    list.add(present_properties);
    if (present_properties)
      list.add(properties);

    boolean present_stats = true && (isSetStats());
    list.add(present_stats);
    if (present_stats)
      list.add(stats);

    boolean present_viewOriginalText = true && (isSetViewOriginalText());
    list.add(present_viewOriginalText);
    if (present_viewOriginalText)
      list.add(viewOriginalText);

    boolean present_viewText = true && (isSetViewText());
    list.add(present_viewText);
    if (present_viewText)
      list.add(viewText);

    boolean present_comment = true && (isSetComment());
    list.add(present_comment);
    if (present_comment)
      list.add(comment);

    boolean present_unsupportedFeatures = true && (isSetUnsupportedFeatures());
    list.add(present_unsupportedFeatures);
    if (present_unsupportedFeatures)
      list.add(unsupportedFeatures);

    boolean present_tracksPartitionsInCatalog = true;
    list.add(present_tracksPartitionsInCatalog);
    if (present_tracksPartitionsInCatalog)
      list.add(tracksPartitionsInCatalog);

    boolean present_schemaPreservesCase = true;
    list.add(present_schemaPreservesCase);
    if (present_schemaPreservesCase)
      list.add(schemaPreservesCase);

    boolean present_ignoredProperties = true && (isSetIgnoredProperties());
    list.add(present_ignoredProperties);
    if (present_ignoredProperties)
      list.add(ignoredProperties);

    return list.hashCode();
  }

  @Override
  public int compareTo(CatalogTableObject other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatabaseName()).compareTo(other.isSetDatabaseName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatabaseName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.databaseName, other.databaseName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTableType()).compareTo(other.isSetTableType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableType, other.tableType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStorage()).compareTo(other.isSetStorage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStorage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storage, other.storage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTableSchema()).compareTo(other.isSetTableSchema());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableSchema()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableSchema, other.tableSchema);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvider()).compareTo(other.isSetProvider());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvider()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.provider, other.provider);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartitionColumns()).compareTo(other.isSetPartitionColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitionColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitionColumns, other.partitionColumns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndexColumns()).compareTo(other.isSetIndexColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndexColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexColumns, other.indexColumns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrimaryKeyColumns()).compareTo(other.isSetPrimaryKeyColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrimaryKeyColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.primaryKeyColumns, other.primaryKeyColumns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumBuckets()).compareTo(other.isSetNumBuckets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumBuckets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numBuckets, other.numBuckets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRedundancy()).compareTo(other.isSetRedundancy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRedundancy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.redundancy, other.redundancy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBucketOwners()).compareTo(other.isSetBucketOwners());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBucketOwners()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketOwners, other.bucketOwners);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBucketColumns()).compareTo(other.isSetBucketColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBucketColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketColumns, other.bucketColumns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortColumns()).compareTo(other.isSetSortColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortColumns, other.sortColumns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwner()).compareTo(other.isSetOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, other.owner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastAccessTime()).compareTo(other.isSetLastAccessTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastAccessTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastAccessTime, other.lastAccessTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProperties()).compareTo(other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStats()).compareTo(other.isSetStats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stats, other.stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViewOriginalText()).compareTo(other.isSetViewOriginalText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewOriginalText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewOriginalText, other.viewOriginalText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViewText()).compareTo(other.isSetViewText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewText, other.viewText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComment()).compareTo(other.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnsupportedFeatures()).compareTo(other.isSetUnsupportedFeatures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnsupportedFeatures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unsupportedFeatures, other.unsupportedFeatures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTracksPartitionsInCatalog()).compareTo(other.isSetTracksPartitionsInCatalog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTracksPartitionsInCatalog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tracksPartitionsInCatalog, other.tracksPartitionsInCatalog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchemaPreservesCase()).compareTo(other.isSetSchemaPreservesCase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchemaPreservesCase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schemaPreservesCase, other.schemaPreservesCase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIgnoredProperties()).compareTo(other.isSetIgnoredProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIgnoredProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ignoredProperties, other.ignoredProperties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CatalogTableObject(");
    boolean first = true;

    sb.append("tableName:");
    if (this.tableName == null) {
      sb.append("null");
    } else {
      sb.append(this.tableName);
    }
    first = false;
    if (isSetDatabaseName()) {
      if (!first) sb.append(", ");
      sb.append("databaseName:");
      if (this.databaseName == null) {
        sb.append("null");
      } else {
        sb.append(this.databaseName);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("tableType:");
    if (this.tableType == null) {
      sb.append("null");
    } else {
      sb.append(this.tableType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("storage:");
    if (this.storage == null) {
      sb.append("null");
    } else {
      sb.append(this.storage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tableSchema:");
    if (this.tableSchema == null) {
      sb.append("null");
    } else {
      sb.append(this.tableSchema);
    }
    first = false;
    if (isSetProvider()) {
      if (!first) sb.append(", ");
      sb.append("provider:");
      if (this.provider == null) {
        sb.append("null");
      } else {
        sb.append(this.provider);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("partitionColumns:");
    if (this.partitionColumns == null) {
      sb.append("null");
    } else {
      sb.append(this.partitionColumns);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("indexColumns:");
    if (this.indexColumns == null) {
      sb.append("null");
    } else {
      sb.append(this.indexColumns);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("primaryKeyColumns:");
    if (this.primaryKeyColumns == null) {
      sb.append("null");
    } else {
      sb.append(this.primaryKeyColumns);
    }
    first = false;
    if (isSetNumBuckets()) {
      if (!first) sb.append(", ");
      sb.append("numBuckets:");
      sb.append(this.numBuckets);
      first = false;
    }
    if (isSetRedundancy()) {
      if (!first) sb.append(", ");
      sb.append("redundancy:");
      sb.append(this.redundancy);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("bucketOwners:");
    if (this.bucketOwners == null) {
      sb.append("null");
    } else {
      sb.append(this.bucketOwners);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bucketColumns:");
    if (this.bucketColumns == null) {
      sb.append("null");
    } else {
      sb.append(this.bucketColumns);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sortColumns:");
    if (this.sortColumns == null) {
      sb.append("null");
    } else {
      sb.append(this.sortColumns);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("owner:");
    if (this.owner == null) {
      sb.append("null");
    } else {
      sb.append(this.owner);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastAccessTime:");
    sb.append(this.lastAccessTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("properties:");
    if (this.properties == null) {
      sb.append("null");
    } else {
      sb.append(this.properties);
    }
    first = false;
    if (isSetStats()) {
      if (!first) sb.append(", ");
      sb.append("stats:");
      if (this.stats == null) {
        sb.append("null");
      } else {
        sb.append(this.stats);
      }
      first = false;
    }
    if (isSetViewOriginalText()) {
      if (!first) sb.append(", ");
      sb.append("viewOriginalText:");
      if (this.viewOriginalText == null) {
        sb.append("null");
      } else {
        sb.append(this.viewOriginalText);
      }
      first = false;
    }
    if (isSetViewText()) {
      if (!first) sb.append(", ");
      sb.append("viewText:");
      if (this.viewText == null) {
        sb.append("null");
      } else {
        sb.append(this.viewText);
      }
      first = false;
    }
    if (isSetComment()) {
      if (!first) sb.append(", ");
      sb.append("comment:");
      if (this.comment == null) {
        sb.append("null");
      } else {
        sb.append(this.comment);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("unsupportedFeatures:");
    if (this.unsupportedFeatures == null) {
      sb.append("null");
    } else {
      sb.append(this.unsupportedFeatures);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tracksPartitionsInCatalog:");
    sb.append(this.tracksPartitionsInCatalog);
    first = false;
    if (!first) sb.append(", ");
    sb.append("schemaPreservesCase:");
    sb.append(this.schemaPreservesCase);
    first = false;
    if (isSetIgnoredProperties()) {
      if (!first) sb.append(", ");
      sb.append("ignoredProperties:");
      if (this.ignoredProperties == null) {
        sb.append("null");
      } else {
        sb.append(this.ignoredProperties);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (tableName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tableName' was not present! Struct: " + toString());
    }
    if (tableType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tableType' was not present! Struct: " + toString());
    }
    if (storage == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'storage' was not present! Struct: " + toString());
    }
    if (tableSchema == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tableSchema' was not present! Struct: " + toString());
    }
    if (partitionColumns == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'partitionColumns' was not present! Struct: " + toString());
    }
    if (indexColumns == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'indexColumns' was not present! Struct: " + toString());
    }
    if (primaryKeyColumns == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'primaryKeyColumns' was not present! Struct: " + toString());
    }
    if (bucketOwners == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'bucketOwners' was not present! Struct: " + toString());
    }
    if (bucketColumns == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'bucketColumns' was not present! Struct: " + toString());
    }
    if (sortColumns == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sortColumns' was not present! Struct: " + toString());
    }
    if (owner == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'owner' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'createTime' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'lastAccessTime' because it's a primitive and you chose the non-beans generator.
    if (properties == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'properties' was not present! Struct: " + toString());
    }
    if (unsupportedFeatures == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'unsupportedFeatures' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'tracksPartitionsInCatalog' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'schemaPreservesCase' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (storage != null) {
      storage.validate();
    }
    if (stats != null) {
      stats.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CatalogTableObjectStandardSchemeFactory implements SchemeFactory {
    public CatalogTableObjectStandardScheme getScheme() {
      return new CatalogTableObjectStandardScheme();
    }
  }

  private static class CatalogTableObjectStandardScheme extends StandardScheme<CatalogTableObject> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CatalogTableObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tableName = iprot.readString();
              struct.setTableNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATABASE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.databaseName = iprot.readString();
              struct.setDatabaseNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TABLE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tableType = iprot.readString();
              struct.setTableTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STORAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.storage = new CatalogStorage();
              struct.storage.read(iprot);
              struct.setStorageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TABLE_SCHEMA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tableSchema = iprot.readString();
              struct.setTableSchemaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROVIDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.provider = iprot.readString();
              struct.setProviderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PARTITION_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list316 = iprot.readListBegin();
                struct.partitionColumns = new ArrayList<String>(_list316.size);
                String _elem317;
                for (int _i318 = 0; _i318 < _list316.size; ++_i318)
                {
                  _elem317 = iprot.readString();
                  struct.partitionColumns.add(_elem317);
                }
                iprot.readListEnd();
              }
              struct.setPartitionColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // INDEX_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list319 = iprot.readListBegin();
                struct.indexColumns = new ArrayList<String>(_list319.size);
                String _elem320;
                for (int _i321 = 0; _i321 < _list319.size; ++_i321)
                {
                  _elem320 = iprot.readString();
                  struct.indexColumns.add(_elem320);
                }
                iprot.readListEnd();
              }
              struct.setIndexColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PRIMARY_KEY_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list322 = iprot.readListBegin();
                struct.primaryKeyColumns = new ArrayList<String>(_list322.size);
                String _elem323;
                for (int _i324 = 0; _i324 < _list322.size; ++_i324)
                {
                  _elem323 = iprot.readString();
                  struct.primaryKeyColumns.add(_elem323);
                }
                iprot.readListEnd();
              }
              struct.setPrimaryKeyColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NUM_BUCKETS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numBuckets = iprot.readI32();
              struct.setNumBucketsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REDUNDANCY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.redundancy = iprot.readI32();
              struct.setRedundancyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // BUCKET_OWNERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list325 = iprot.readListBegin();
                struct.bucketOwners = new ArrayList<BucketOwners>(_list325.size);
                BucketOwners _elem326;
                for (int _i327 = 0; _i327 < _list325.size; ++_i327)
                {
                  _elem326 = new BucketOwners();
                  _elem326.read(iprot);
                  struct.bucketOwners.add(_elem326);
                }
                iprot.readListEnd();
              }
              struct.setBucketOwnersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BUCKET_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list328 = iprot.readListBegin();
                struct.bucketColumns = new ArrayList<String>(_list328.size);
                String _elem329;
                for (int _i330 = 0; _i330 < _list328.size; ++_i330)
                {
                  _elem329 = iprot.readString();
                  struct.bucketColumns.add(_elem329);
                }
                iprot.readListEnd();
              }
              struct.setBucketColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SORT_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list331 = iprot.readListBegin();
                struct.sortColumns = new ArrayList<String>(_list331.size);
                String _elem332;
                for (int _i333 = 0; _i333 < _list331.size; ++_i333)
                {
                  _elem332 = iprot.readString();
                  struct.sortColumns.add(_elem332);
                }
                iprot.readListEnd();
              }
              struct.setSortColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // OWNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.owner = iprot.readString();
              struct.setOwnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LAST_ACCESS_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastAccessTime = iprot.readI64();
              struct.setLastAccessTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map334 = iprot.readMapBegin();
                struct.properties = new HashMap<String,String>(2*_map334.size);
                String _key335;
                String _val336;
                for (int _i337 = 0; _i337 < _map334.size; ++_i337)
                {
                  _key335 = iprot.readString();
                  _val336 = iprot.readString();
                  struct.properties.put(_key335, _val336);
                }
                iprot.readMapEnd();
              }
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.stats = new CatalogStats();
              struct.stats.read(iprot);
              struct.setStatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // VIEW_ORIGINAL_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.viewOriginalText = iprot.readString();
              struct.setViewOriginalTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // VIEW_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.viewText = iprot.readString();
              struct.setViewTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comment = iprot.readString();
              struct.setCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // UNSUPPORTED_FEATURES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list338 = iprot.readListBegin();
                struct.unsupportedFeatures = new ArrayList<String>(_list338.size);
                String _elem339;
                for (int _i340 = 0; _i340 < _list338.size; ++_i340)
                {
                  _elem339 = iprot.readString();
                  struct.unsupportedFeatures.add(_elem339);
                }
                iprot.readListEnd();
              }
              struct.setUnsupportedFeaturesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // TRACKS_PARTITIONS_IN_CATALOG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.tracksPartitionsInCatalog = iprot.readBool();
              struct.setTracksPartitionsInCatalogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // SCHEMA_PRESERVES_CASE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.schemaPreservesCase = iprot.readBool();
              struct.setSchemaPreservesCaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // IGNORED_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map341 = iprot.readMapBegin();
                struct.ignoredProperties = new HashMap<String,String>(2*_map341.size);
                String _key342;
                String _val343;
                for (int _i344 = 0; _i344 < _map341.size; ++_i344)
                {
                  _key342 = iprot.readString();
                  _val343 = iprot.readString();
                  struct.ignoredProperties.put(_key342, _val343);
                }
                iprot.readMapEnd();
              }
              struct.setIgnoredPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCreateTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'createTime' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLastAccessTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'lastAccessTime' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTracksPartitionsInCatalog()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tracksPartitionsInCatalog' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSchemaPreservesCase()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'schemaPreservesCase' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CatalogTableObject struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tableName != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(struct.tableName);
        oprot.writeFieldEnd();
      }
      if (struct.databaseName != null) {
        if (struct.isSetDatabaseName()) {
          oprot.writeFieldBegin(DATABASE_NAME_FIELD_DESC);
          oprot.writeString(struct.databaseName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tableType != null) {
        oprot.writeFieldBegin(TABLE_TYPE_FIELD_DESC);
        oprot.writeString(struct.tableType);
        oprot.writeFieldEnd();
      }
      if (struct.storage != null) {
        oprot.writeFieldBegin(STORAGE_FIELD_DESC);
        struct.storage.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.tableSchema != null) {
        oprot.writeFieldBegin(TABLE_SCHEMA_FIELD_DESC);
        oprot.writeString(struct.tableSchema);
        oprot.writeFieldEnd();
      }
      if (struct.provider != null) {
        if (struct.isSetProvider()) {
          oprot.writeFieldBegin(PROVIDER_FIELD_DESC);
          oprot.writeString(struct.provider);
          oprot.writeFieldEnd();
        }
      }
      if (struct.partitionColumns != null) {
        oprot.writeFieldBegin(PARTITION_COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.partitionColumns.size()));
          for (String _iter345 : struct.partitionColumns)
          {
            oprot.writeString(_iter345);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.indexColumns != null) {
        oprot.writeFieldBegin(INDEX_COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.indexColumns.size()));
          for (String _iter346 : struct.indexColumns)
          {
            oprot.writeString(_iter346);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.primaryKeyColumns != null) {
        oprot.writeFieldBegin(PRIMARY_KEY_COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.primaryKeyColumns.size()));
          for (String _iter347 : struct.primaryKeyColumns)
          {
            oprot.writeString(_iter347);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetNumBuckets()) {
        oprot.writeFieldBegin(NUM_BUCKETS_FIELD_DESC);
        oprot.writeI32(struct.numBuckets);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRedundancy()) {
        oprot.writeFieldBegin(REDUNDANCY_FIELD_DESC);
        oprot.writeI32(struct.redundancy);
        oprot.writeFieldEnd();
      }
      if (struct.bucketOwners != null) {
        oprot.writeFieldBegin(BUCKET_OWNERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.bucketOwners.size()));
          for (BucketOwners _iter348 : struct.bucketOwners)
          {
            _iter348.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.bucketColumns != null) {
        oprot.writeFieldBegin(BUCKET_COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.bucketColumns.size()));
          for (String _iter349 : struct.bucketColumns)
          {
            oprot.writeString(_iter349);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.sortColumns != null) {
        oprot.writeFieldBegin(SORT_COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.sortColumns.size()));
          for (String _iter350 : struct.sortColumns)
          {
            oprot.writeString(_iter350);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.owner != null) {
        oprot.writeFieldBegin(OWNER_FIELD_DESC);
        oprot.writeString(struct.owner);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_ACCESS_TIME_FIELD_DESC);
      oprot.writeI64(struct.lastAccessTime);
      oprot.writeFieldEnd();
      if (struct.properties != null) {
        oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.properties.size()));
          for (Map.Entry<String, String> _iter351 : struct.properties.entrySet())
          {
            oprot.writeString(_iter351.getKey());
            oprot.writeString(_iter351.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.stats != null) {
        if (struct.isSetStats()) {
          oprot.writeFieldBegin(STATS_FIELD_DESC);
          struct.stats.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.viewOriginalText != null) {
        if (struct.isSetViewOriginalText()) {
          oprot.writeFieldBegin(VIEW_ORIGINAL_TEXT_FIELD_DESC);
          oprot.writeString(struct.viewOriginalText);
          oprot.writeFieldEnd();
        }
      }
      if (struct.viewText != null) {
        if (struct.isSetViewText()) {
          oprot.writeFieldBegin(VIEW_TEXT_FIELD_DESC);
          oprot.writeString(struct.viewText);
          oprot.writeFieldEnd();
        }
      }
      if (struct.comment != null) {
        if (struct.isSetComment()) {
          oprot.writeFieldBegin(COMMENT_FIELD_DESC);
          oprot.writeString(struct.comment);
          oprot.writeFieldEnd();
        }
      }
      if (struct.unsupportedFeatures != null) {
        oprot.writeFieldBegin(UNSUPPORTED_FEATURES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.unsupportedFeatures.size()));
          for (String _iter352 : struct.unsupportedFeatures)
          {
            oprot.writeString(_iter352);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TRACKS_PARTITIONS_IN_CATALOG_FIELD_DESC);
      oprot.writeBool(struct.tracksPartitionsInCatalog);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCHEMA_PRESERVES_CASE_FIELD_DESC);
      oprot.writeBool(struct.schemaPreservesCase);
      oprot.writeFieldEnd();
      if (struct.ignoredProperties != null) {
        if (struct.isSetIgnoredProperties()) {
          oprot.writeFieldBegin(IGNORED_PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.ignoredProperties.size()));
            for (Map.Entry<String, String> _iter353 : struct.ignoredProperties.entrySet())
            {
              oprot.writeString(_iter353.getKey());
              oprot.writeString(_iter353.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CatalogTableObjectTupleSchemeFactory implements SchemeFactory {
    public CatalogTableObjectTupleScheme getScheme() {
      return new CatalogTableObjectTupleScheme();
    }
  }

  private static class CatalogTableObjectTupleScheme extends TupleScheme<CatalogTableObject> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CatalogTableObject struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.tableName);
      oprot.writeString(struct.tableType);
      struct.storage.write(oprot);
      oprot.writeString(struct.tableSchema);
      {
        oprot.writeI32(struct.partitionColumns.size());
        for (String _iter354 : struct.partitionColumns)
        {
          oprot.writeString(_iter354);
        }
      }
      {
        oprot.writeI32(struct.indexColumns.size());
        for (String _iter355 : struct.indexColumns)
        {
          oprot.writeString(_iter355);
        }
      }
      {
        oprot.writeI32(struct.primaryKeyColumns.size());
        for (String _iter356 : struct.primaryKeyColumns)
        {
          oprot.writeString(_iter356);
        }
      }
      {
        oprot.writeI32(struct.bucketOwners.size());
        for (BucketOwners _iter357 : struct.bucketOwners)
        {
          _iter357.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.bucketColumns.size());
        for (String _iter358 : struct.bucketColumns)
        {
          oprot.writeString(_iter358);
        }
      }
      {
        oprot.writeI32(struct.sortColumns.size());
        for (String _iter359 : struct.sortColumns)
        {
          oprot.writeString(_iter359);
        }
      }
      oprot.writeString(struct.owner);
      oprot.writeI64(struct.createTime);
      oprot.writeI64(struct.lastAccessTime);
      {
        oprot.writeI32(struct.properties.size());
        for (Map.Entry<String, String> _iter360 : struct.properties.entrySet())
        {
          oprot.writeString(_iter360.getKey());
          oprot.writeString(_iter360.getValue());
        }
      }
      {
        oprot.writeI32(struct.unsupportedFeatures.size());
        for (String _iter361 : struct.unsupportedFeatures)
        {
          oprot.writeString(_iter361);
        }
      }
      oprot.writeBool(struct.tracksPartitionsInCatalog);
      oprot.writeBool(struct.schemaPreservesCase);
      BitSet optionals = new BitSet();
      if (struct.isSetDatabaseName()) {
        optionals.set(0);
      }
      if (struct.isSetProvider()) {
        optionals.set(1);
      }
      if (struct.isSetNumBuckets()) {
        optionals.set(2);
      }
      if (struct.isSetRedundancy()) {
        optionals.set(3);
      }
      if (struct.isSetStats()) {
        optionals.set(4);
      }
      if (struct.isSetViewOriginalText()) {
        optionals.set(5);
      }
      if (struct.isSetViewText()) {
        optionals.set(6);
      }
      if (struct.isSetComment()) {
        optionals.set(7);
      }
      if (struct.isSetIgnoredProperties()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetDatabaseName()) {
        oprot.writeString(struct.databaseName);
      }
      if (struct.isSetProvider()) {
        oprot.writeString(struct.provider);
      }
      if (struct.isSetNumBuckets()) {
        oprot.writeI32(struct.numBuckets);
      }
      if (struct.isSetRedundancy()) {
        oprot.writeI32(struct.redundancy);
      }
      if (struct.isSetStats()) {
        struct.stats.write(oprot);
      }
      if (struct.isSetViewOriginalText()) {
        oprot.writeString(struct.viewOriginalText);
      }
      if (struct.isSetViewText()) {
        oprot.writeString(struct.viewText);
      }
      if (struct.isSetComment()) {
        oprot.writeString(struct.comment);
      }
      if (struct.isSetIgnoredProperties()) {
        {
          oprot.writeI32(struct.ignoredProperties.size());
          for (Map.Entry<String, String> _iter362 : struct.ignoredProperties.entrySet())
          {
            oprot.writeString(_iter362.getKey());
            oprot.writeString(_iter362.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CatalogTableObject struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.tableName = iprot.readString();
      struct.setTableNameIsSet(true);
      struct.tableType = iprot.readString();
      struct.setTableTypeIsSet(true);
      struct.storage = new CatalogStorage();
      struct.storage.read(iprot);
      struct.setStorageIsSet(true);
      struct.tableSchema = iprot.readString();
      struct.setTableSchemaIsSet(true);
      {
        org.apache.thrift.protocol.TList _list363 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.partitionColumns = new ArrayList<String>(_list363.size);
        String _elem364;
        for (int _i365 = 0; _i365 < _list363.size; ++_i365)
        {
          _elem364 = iprot.readString();
          struct.partitionColumns.add(_elem364);
        }
      }
      struct.setPartitionColumnsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list366 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.indexColumns = new ArrayList<String>(_list366.size);
        String _elem367;
        for (int _i368 = 0; _i368 < _list366.size; ++_i368)
        {
          _elem367 = iprot.readString();
          struct.indexColumns.add(_elem367);
        }
      }
      struct.setIndexColumnsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list369 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.primaryKeyColumns = new ArrayList<String>(_list369.size);
        String _elem370;
        for (int _i371 = 0; _i371 < _list369.size; ++_i371)
        {
          _elem370 = iprot.readString();
          struct.primaryKeyColumns.add(_elem370);
        }
      }
      struct.setPrimaryKeyColumnsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list372 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.bucketOwners = new ArrayList<BucketOwners>(_list372.size);
        BucketOwners _elem373;
        for (int _i374 = 0; _i374 < _list372.size; ++_i374)
        {
          _elem373 = new BucketOwners();
          _elem373.read(iprot);
          struct.bucketOwners.add(_elem373);
        }
      }
      struct.setBucketOwnersIsSet(true);
      {
        org.apache.thrift.protocol.TList _list375 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.bucketColumns = new ArrayList<String>(_list375.size);
        String _elem376;
        for (int _i377 = 0; _i377 < _list375.size; ++_i377)
        {
          _elem376 = iprot.readString();
          struct.bucketColumns.add(_elem376);
        }
      }
      struct.setBucketColumnsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list378 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.sortColumns = new ArrayList<String>(_list378.size);
        String _elem379;
        for (int _i380 = 0; _i380 < _list378.size; ++_i380)
        {
          _elem379 = iprot.readString();
          struct.sortColumns.add(_elem379);
        }
      }
      struct.setSortColumnsIsSet(true);
      struct.owner = iprot.readString();
      struct.setOwnerIsSet(true);
      struct.createTime = iprot.readI64();
      struct.setCreateTimeIsSet(true);
      struct.lastAccessTime = iprot.readI64();
      struct.setLastAccessTimeIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map381 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.properties = new HashMap<String,String>(2*_map381.size);
        String _key382;
        String _val383;
        for (int _i384 = 0; _i384 < _map381.size; ++_i384)
        {
          _key382 = iprot.readString();
          _val383 = iprot.readString();
          struct.properties.put(_key382, _val383);
        }
      }
      struct.setPropertiesIsSet(true);
      {
        org.apache.thrift.protocol.TList _list385 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.unsupportedFeatures = new ArrayList<String>(_list385.size);
        String _elem386;
        for (int _i387 = 0; _i387 < _list385.size; ++_i387)
        {
          _elem386 = iprot.readString();
          struct.unsupportedFeatures.add(_elem386);
        }
      }
      struct.setUnsupportedFeaturesIsSet(true);
      struct.tracksPartitionsInCatalog = iprot.readBool();
      struct.setTracksPartitionsInCatalogIsSet(true);
      struct.schemaPreservesCase = iprot.readBool();
      struct.setSchemaPreservesCaseIsSet(true);
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.databaseName = iprot.readString();
        struct.setDatabaseNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.provider = iprot.readString();
        struct.setProviderIsSet(true);
      }
      if (incoming.get(2)) {
        struct.numBuckets = iprot.readI32();
        struct.setNumBucketsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.redundancy = iprot.readI32();
        struct.setRedundancyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.stats = new CatalogStats();
        struct.stats.read(iprot);
        struct.setStatsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.viewOriginalText = iprot.readString();
        struct.setViewOriginalTextIsSet(true);
      }
      if (incoming.get(6)) {
        struct.viewText = iprot.readString();
        struct.setViewTextIsSet(true);
      }
      if (incoming.get(7)) {
        struct.comment = iprot.readString();
        struct.setCommentIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TMap _map388 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.ignoredProperties = new HashMap<String,String>(2*_map388.size);
          String _key389;
          String _val390;
          for (int _i391 = 0; _i391 < _map388.size; ++_i391)
          {
            _key389 = iprot.readString();
            _val390 = iprot.readString();
            struct.ignoredProperties.put(_key389, _val390);
          }
        }
        struct.setIgnoredPropertiesIsSet(true);
      }
    }
  }

}

