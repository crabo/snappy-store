/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.snappydata.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2020-12-07")
public class CatalogMetadataDetails implements org.apache.thrift.TBase<CatalogMetadataDetails, CatalogMetadataDetails._Fields>, java.io.Serializable, Cloneable, Comparable<CatalogMetadataDetails> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CatalogMetadataDetails");

  private static final org.apache.thrift.protocol.TField NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("names", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField NEW_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("newProperties", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField CATALOG_SCHEMA_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("catalogSchemaVersion", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField EXISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("exists", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField OTHER_FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("otherFlags", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField CATALOG_DATABASE_FIELD_DESC = new org.apache.thrift.protocol.TField("catalogDatabase", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField CATALOG_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("catalogTable", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField CATALOG_FUNCTION_FIELD_DESC = new org.apache.thrift.protocol.TField("catalogFunction", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField CATALOG_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("catalogPartitions", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField CATALOG_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("catalogStats", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField NEW_SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("newSchema", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CatalogMetadataDetailsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CatalogMetadataDetailsTupleSchemeFactory());
  }

  public List<String> names; // optional
  public List<Map<String,String>> properties; // optional
  public List<Map<String,String>> newProperties; // optional
  public long catalogSchemaVersion; // optional
  public boolean exists; // optional
  public List<Integer> otherFlags; // optional
  public CatalogSchemaObject catalogDatabase; // optional
  public CatalogTableObject catalogTable; // optional
  public CatalogFunctionObject catalogFunction; // optional
  public List<CatalogPartitionObject> catalogPartitions; // optional
  public CatalogStats catalogStats; // optional
  public String newSchema; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAMES((short)1, "names"),
    PROPERTIES((short)2, "properties"),
    NEW_PROPERTIES((short)3, "newProperties"),
    CATALOG_SCHEMA_VERSION((short)4, "catalogSchemaVersion"),
    EXISTS((short)5, "exists"),
    OTHER_FLAGS((short)6, "otherFlags"),
    CATALOG_DATABASE((short)7, "catalogDatabase"),
    CATALOG_TABLE((short)8, "catalogTable"),
    CATALOG_FUNCTION((short)9, "catalogFunction"),
    CATALOG_PARTITIONS((short)10, "catalogPartitions"),
    CATALOG_STATS((short)11, "catalogStats"),
    NEW_SCHEMA((short)12, "newSchema");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAMES
          return NAMES;
        case 2: // PROPERTIES
          return PROPERTIES;
        case 3: // NEW_PROPERTIES
          return NEW_PROPERTIES;
        case 4: // CATALOG_SCHEMA_VERSION
          return CATALOG_SCHEMA_VERSION;
        case 5: // EXISTS
          return EXISTS;
        case 6: // OTHER_FLAGS
          return OTHER_FLAGS;
        case 7: // CATALOG_DATABASE
          return CATALOG_DATABASE;
        case 8: // CATALOG_TABLE
          return CATALOG_TABLE;
        case 9: // CATALOG_FUNCTION
          return CATALOG_FUNCTION;
        case 10: // CATALOG_PARTITIONS
          return CATALOG_PARTITIONS;
        case 11: // CATALOG_STATS
          return CATALOG_STATS;
        case 12: // NEW_SCHEMA
          return NEW_SCHEMA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CATALOGSCHEMAVERSION_ISSET_ID = 0;
  private static final int __EXISTS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NAMES,_Fields.PROPERTIES,_Fields.NEW_PROPERTIES,_Fields.CATALOG_SCHEMA_VERSION,_Fields.EXISTS,_Fields.OTHER_FLAGS,_Fields.CATALOG_DATABASE,_Fields.CATALOG_TABLE,_Fields.CATALOG_FUNCTION,_Fields.CATALOG_PARTITIONS,_Fields.CATALOG_STATS,_Fields.NEW_SCHEMA};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAMES, new org.apache.thrift.meta_data.FieldMetaData("names", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.NEW_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("newProperties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.CATALOG_SCHEMA_VERSION, new org.apache.thrift.meta_data.FieldMetaData("catalogSchemaVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXISTS, new org.apache.thrift.meta_data.FieldMetaData("exists", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OTHER_FLAGS, new org.apache.thrift.meta_data.FieldMetaData("otherFlags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CATALOG_DATABASE, new org.apache.thrift.meta_data.FieldMetaData("catalogDatabase", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CatalogSchemaObject.class)));
    tmpMap.put(_Fields.CATALOG_TABLE, new org.apache.thrift.meta_data.FieldMetaData("catalogTable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CatalogTableObject.class)));
    tmpMap.put(_Fields.CATALOG_FUNCTION, new org.apache.thrift.meta_data.FieldMetaData("catalogFunction", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CatalogFunctionObject.class)));
    tmpMap.put(_Fields.CATALOG_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("catalogPartitions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CatalogPartitionObject.class))));
    tmpMap.put(_Fields.CATALOG_STATS, new org.apache.thrift.meta_data.FieldMetaData("catalogStats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CatalogStats.class)));
    tmpMap.put(_Fields.NEW_SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("newSchema", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CatalogMetadataDetails.class, metaDataMap);
  }

  public CatalogMetadataDetails() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CatalogMetadataDetails(CatalogMetadataDetails other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNames()) {
      List<String> __this__names = new ArrayList<String>(other.names);
      this.names = __this__names;
    }
    if (other.isSetProperties()) {
      List<Map<String,String>> __this__properties = new ArrayList<Map<String,String>>(other.properties.size());
      for (Map<String,String> other_element : other.properties) {
        Map<String,String> __this__properties_copy = new HashMap<String,String>(other_element);
        __this__properties.add(__this__properties_copy);
      }
      this.properties = __this__properties;
    }
    if (other.isSetNewProperties()) {
      List<Map<String,String>> __this__newProperties = new ArrayList<Map<String,String>>(other.newProperties.size());
      for (Map<String,String> other_element : other.newProperties) {
        Map<String,String> __this__newProperties_copy = new HashMap<String,String>(other_element);
        __this__newProperties.add(__this__newProperties_copy);
      }
      this.newProperties = __this__newProperties;
    }
    this.catalogSchemaVersion = other.catalogSchemaVersion;
    this.exists = other.exists;
    if (other.isSetOtherFlags()) {
      List<Integer> __this__otherFlags = new ArrayList<Integer>(other.otherFlags);
      this.otherFlags = __this__otherFlags;
    }
    if (other.isSetCatalogDatabase()) {
      this.catalogDatabase = new CatalogSchemaObject(other.catalogDatabase);
    }
    if (other.isSetCatalogTable()) {
      this.catalogTable = new CatalogTableObject(other.catalogTable);
    }
    if (other.isSetCatalogFunction()) {
      this.catalogFunction = new CatalogFunctionObject(other.catalogFunction);
    }
    if (other.isSetCatalogPartitions()) {
      List<CatalogPartitionObject> __this__catalogPartitions = new ArrayList<CatalogPartitionObject>(other.catalogPartitions.size());
      for (CatalogPartitionObject other_element : other.catalogPartitions) {
        __this__catalogPartitions.add(new CatalogPartitionObject(other_element));
      }
      this.catalogPartitions = __this__catalogPartitions;
    }
    if (other.isSetCatalogStats()) {
      this.catalogStats = new CatalogStats(other.catalogStats);
    }
    if (other.isSetNewSchema()) {
      this.newSchema = other.newSchema;
    }
  }

  public CatalogMetadataDetails deepCopy() {
    return new CatalogMetadataDetails(this);
  }

  @Override
  public void clear() {
    this.names = null;
    this.properties = null;
    this.newProperties = null;
    setCatalogSchemaVersionIsSet(false);
    this.catalogSchemaVersion = 0;
    setExistsIsSet(false);
    this.exists = false;
    this.otherFlags = null;
    this.catalogDatabase = null;
    this.catalogTable = null;
    this.catalogFunction = null;
    this.catalogPartitions = null;
    this.catalogStats = null;
    this.newSchema = null;
  }

  public int getNamesSize() {
    return (this.names == null) ? 0 : this.names.size();
  }

  public java.util.Iterator<String> getNamesIterator() {
    return (this.names == null) ? null : this.names.iterator();
  }

  public void addToNames(String elem) {
    if (this.names == null) {
      this.names = new ArrayList<String>();
    }
    this.names.add(elem);
  }

  public List<String> getNames() {
    return this.names;
  }

  public CatalogMetadataDetails setNames(List<String> names) {
    this.names = names;
    return this;
  }

  public void unsetNames() {
    this.names = null;
  }

  /** Returns true if field names is set (has been assigned a value) and false otherwise */
  public boolean isSetNames() {
    return this.names != null;
  }

  public void setNamesIsSet(boolean value) {
    if (!value) {
      this.names = null;
    }
  }

  public int getPropertiesSize() {
    return (this.properties == null) ? 0 : this.properties.size();
  }

  public java.util.Iterator<Map<String,String>> getPropertiesIterator() {
    return (this.properties == null) ? null : this.properties.iterator();
  }

  public void addToProperties(Map<String,String> elem) {
    if (this.properties == null) {
      this.properties = new ArrayList<Map<String,String>>();
    }
    this.properties.add(elem);
  }

  public List<Map<String,String>> getProperties() {
    return this.properties;
  }

  public CatalogMetadataDetails setProperties(List<Map<String,String>> properties) {
    this.properties = properties;
    return this;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  /** Returns true if field properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  public int getNewPropertiesSize() {
    return (this.newProperties == null) ? 0 : this.newProperties.size();
  }

  public java.util.Iterator<Map<String,String>> getNewPropertiesIterator() {
    return (this.newProperties == null) ? null : this.newProperties.iterator();
  }

  public void addToNewProperties(Map<String,String> elem) {
    if (this.newProperties == null) {
      this.newProperties = new ArrayList<Map<String,String>>();
    }
    this.newProperties.add(elem);
  }

  public List<Map<String,String>> getNewProperties() {
    return this.newProperties;
  }

  public CatalogMetadataDetails setNewProperties(List<Map<String,String>> newProperties) {
    this.newProperties = newProperties;
    return this;
  }

  public void unsetNewProperties() {
    this.newProperties = null;
  }

  /** Returns true if field newProperties is set (has been assigned a value) and false otherwise */
  public boolean isSetNewProperties() {
    return this.newProperties != null;
  }

  public void setNewPropertiesIsSet(boolean value) {
    if (!value) {
      this.newProperties = null;
    }
  }

  public long getCatalogSchemaVersion() {
    return this.catalogSchemaVersion;
  }

  public CatalogMetadataDetails setCatalogSchemaVersion(long catalogSchemaVersion) {
    this.catalogSchemaVersion = catalogSchemaVersion;
    setCatalogSchemaVersionIsSet(true);
    return this;
  }

  public void unsetCatalogSchemaVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CATALOGSCHEMAVERSION_ISSET_ID);
  }

  /** Returns true if field catalogSchemaVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetCatalogSchemaVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __CATALOGSCHEMAVERSION_ISSET_ID);
  }

  public void setCatalogSchemaVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CATALOGSCHEMAVERSION_ISSET_ID, value);
  }

  public boolean isExists() {
    return this.exists;
  }

  public CatalogMetadataDetails setExists(boolean exists) {
    this.exists = exists;
    setExistsIsSet(true);
    return this;
  }

  public void unsetExists() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXISTS_ISSET_ID);
  }

  /** Returns true if field exists is set (has been assigned a value) and false otherwise */
  public boolean isSetExists() {
    return EncodingUtils.testBit(__isset_bitfield, __EXISTS_ISSET_ID);
  }

  public void setExistsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXISTS_ISSET_ID, value);
  }

  public int getOtherFlagsSize() {
    return (this.otherFlags == null) ? 0 : this.otherFlags.size();
  }

  public java.util.Iterator<Integer> getOtherFlagsIterator() {
    return (this.otherFlags == null) ? null : this.otherFlags.iterator();
  }

  public void addToOtherFlags(int elem) {
    if (this.otherFlags == null) {
      this.otherFlags = new ArrayList<Integer>();
    }
    this.otherFlags.add(elem);
  }

  public List<Integer> getOtherFlags() {
    return this.otherFlags;
  }

  public CatalogMetadataDetails setOtherFlags(List<Integer> otherFlags) {
    this.otherFlags = otherFlags;
    return this;
  }

  public void unsetOtherFlags() {
    this.otherFlags = null;
  }

  /** Returns true if field otherFlags is set (has been assigned a value) and false otherwise */
  public boolean isSetOtherFlags() {
    return this.otherFlags != null;
  }

  public void setOtherFlagsIsSet(boolean value) {
    if (!value) {
      this.otherFlags = null;
    }
  }

  public CatalogSchemaObject getCatalogDatabase() {
    return this.catalogDatabase;
  }

  public CatalogMetadataDetails setCatalogDatabase(CatalogSchemaObject catalogDatabase) {
    this.catalogDatabase = catalogDatabase;
    return this;
  }

  public void unsetCatalogDatabase() {
    this.catalogDatabase = null;
  }

  /** Returns true if field catalogDatabase is set (has been assigned a value) and false otherwise */
  public boolean isSetCatalogDatabase() {
    return this.catalogDatabase != null;
  }

  public void setCatalogDatabaseIsSet(boolean value) {
    if (!value) {
      this.catalogDatabase = null;
    }
  }

  public CatalogTableObject getCatalogTable() {
    return this.catalogTable;
  }

  public CatalogMetadataDetails setCatalogTable(CatalogTableObject catalogTable) {
    this.catalogTable = catalogTable;
    return this;
  }

  public void unsetCatalogTable() {
    this.catalogTable = null;
  }

  /** Returns true if field catalogTable is set (has been assigned a value) and false otherwise */
  public boolean isSetCatalogTable() {
    return this.catalogTable != null;
  }

  public void setCatalogTableIsSet(boolean value) {
    if (!value) {
      this.catalogTable = null;
    }
  }

  public CatalogFunctionObject getCatalogFunction() {
    return this.catalogFunction;
  }

  public CatalogMetadataDetails setCatalogFunction(CatalogFunctionObject catalogFunction) {
    this.catalogFunction = catalogFunction;
    return this;
  }

  public void unsetCatalogFunction() {
    this.catalogFunction = null;
  }

  /** Returns true if field catalogFunction is set (has been assigned a value) and false otherwise */
  public boolean isSetCatalogFunction() {
    return this.catalogFunction != null;
  }

  public void setCatalogFunctionIsSet(boolean value) {
    if (!value) {
      this.catalogFunction = null;
    }
  }

  public int getCatalogPartitionsSize() {
    return (this.catalogPartitions == null) ? 0 : this.catalogPartitions.size();
  }

  public java.util.Iterator<CatalogPartitionObject> getCatalogPartitionsIterator() {
    return (this.catalogPartitions == null) ? null : this.catalogPartitions.iterator();
  }

  public void addToCatalogPartitions(CatalogPartitionObject elem) {
    if (this.catalogPartitions == null) {
      this.catalogPartitions = new ArrayList<CatalogPartitionObject>();
    }
    this.catalogPartitions.add(elem);
  }

  public List<CatalogPartitionObject> getCatalogPartitions() {
    return this.catalogPartitions;
  }

  public CatalogMetadataDetails setCatalogPartitions(List<CatalogPartitionObject> catalogPartitions) {
    this.catalogPartitions = catalogPartitions;
    return this;
  }

  public void unsetCatalogPartitions() {
    this.catalogPartitions = null;
  }

  /** Returns true if field catalogPartitions is set (has been assigned a value) and false otherwise */
  public boolean isSetCatalogPartitions() {
    return this.catalogPartitions != null;
  }

  public void setCatalogPartitionsIsSet(boolean value) {
    if (!value) {
      this.catalogPartitions = null;
    }
  }

  public CatalogStats getCatalogStats() {
    return this.catalogStats;
  }

  public CatalogMetadataDetails setCatalogStats(CatalogStats catalogStats) {
    this.catalogStats = catalogStats;
    return this;
  }

  public void unsetCatalogStats() {
    this.catalogStats = null;
  }

  /** Returns true if field catalogStats is set (has been assigned a value) and false otherwise */
  public boolean isSetCatalogStats() {
    return this.catalogStats != null;
  }

  public void setCatalogStatsIsSet(boolean value) {
    if (!value) {
      this.catalogStats = null;
    }
  }

  public String getNewSchema() {
    return this.newSchema;
  }

  public CatalogMetadataDetails setNewSchema(String newSchema) {
    this.newSchema = newSchema;
    return this;
  }

  public void unsetNewSchema() {
    this.newSchema = null;
  }

  /** Returns true if field newSchema is set (has been assigned a value) and false otherwise */
  public boolean isSetNewSchema() {
    return this.newSchema != null;
  }

  public void setNewSchemaIsSet(boolean value) {
    if (!value) {
      this.newSchema = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAMES:
      if (value == null) {
        unsetNames();
      } else {
        setNames((List<String>)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((List<Map<String,String>>)value);
      }
      break;

    case NEW_PROPERTIES:
      if (value == null) {
        unsetNewProperties();
      } else {
        setNewProperties((List<Map<String,String>>)value);
      }
      break;

    case CATALOG_SCHEMA_VERSION:
      if (value == null) {
        unsetCatalogSchemaVersion();
      } else {
        setCatalogSchemaVersion((Long)value);
      }
      break;

    case EXISTS:
      if (value == null) {
        unsetExists();
      } else {
        setExists((Boolean)value);
      }
      break;

    case OTHER_FLAGS:
      if (value == null) {
        unsetOtherFlags();
      } else {
        setOtherFlags((List<Integer>)value);
      }
      break;

    case CATALOG_DATABASE:
      if (value == null) {
        unsetCatalogDatabase();
      } else {
        setCatalogDatabase((CatalogSchemaObject)value);
      }
      break;

    case CATALOG_TABLE:
      if (value == null) {
        unsetCatalogTable();
      } else {
        setCatalogTable((CatalogTableObject)value);
      }
      break;

    case CATALOG_FUNCTION:
      if (value == null) {
        unsetCatalogFunction();
      } else {
        setCatalogFunction((CatalogFunctionObject)value);
      }
      break;

    case CATALOG_PARTITIONS:
      if (value == null) {
        unsetCatalogPartitions();
      } else {
        setCatalogPartitions((List<CatalogPartitionObject>)value);
      }
      break;

    case CATALOG_STATS:
      if (value == null) {
        unsetCatalogStats();
      } else {
        setCatalogStats((CatalogStats)value);
      }
      break;

    case NEW_SCHEMA:
      if (value == null) {
        unsetNewSchema();
      } else {
        setNewSchema((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAMES:
      return getNames();

    case PROPERTIES:
      return getProperties();

    case NEW_PROPERTIES:
      return getNewProperties();

    case CATALOG_SCHEMA_VERSION:
      return getCatalogSchemaVersion();

    case EXISTS:
      return isExists();

    case OTHER_FLAGS:
      return getOtherFlags();

    case CATALOG_DATABASE:
      return getCatalogDatabase();

    case CATALOG_TABLE:
      return getCatalogTable();

    case CATALOG_FUNCTION:
      return getCatalogFunction();

    case CATALOG_PARTITIONS:
      return getCatalogPartitions();

    case CATALOG_STATS:
      return getCatalogStats();

    case NEW_SCHEMA:
      return getNewSchema();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAMES:
      return isSetNames();
    case PROPERTIES:
      return isSetProperties();
    case NEW_PROPERTIES:
      return isSetNewProperties();
    case CATALOG_SCHEMA_VERSION:
      return isSetCatalogSchemaVersion();
    case EXISTS:
      return isSetExists();
    case OTHER_FLAGS:
      return isSetOtherFlags();
    case CATALOG_DATABASE:
      return isSetCatalogDatabase();
    case CATALOG_TABLE:
      return isSetCatalogTable();
    case CATALOG_FUNCTION:
      return isSetCatalogFunction();
    case CATALOG_PARTITIONS:
      return isSetCatalogPartitions();
    case CATALOG_STATS:
      return isSetCatalogStats();
    case NEW_SCHEMA:
      return isSetNewSchema();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CatalogMetadataDetails)
      return this.equals((CatalogMetadataDetails)that);
    return false;
  }

  public boolean equals(CatalogMetadataDetails that) {
    if (that == null)
      return false;

    boolean this_present_names = true && this.isSetNames();
    boolean that_present_names = true && that.isSetNames();
    if (this_present_names || that_present_names) {
      if (!(this_present_names && that_present_names))
        return false;
      if (!this.names.equals(that.names))
        return false;
    }

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!this.properties.equals(that.properties))
        return false;
    }

    boolean this_present_newProperties = true && this.isSetNewProperties();
    boolean that_present_newProperties = true && that.isSetNewProperties();
    if (this_present_newProperties || that_present_newProperties) {
      if (!(this_present_newProperties && that_present_newProperties))
        return false;
      if (!this.newProperties.equals(that.newProperties))
        return false;
    }

    boolean this_present_catalogSchemaVersion = true && this.isSetCatalogSchemaVersion();
    boolean that_present_catalogSchemaVersion = true && that.isSetCatalogSchemaVersion();
    if (this_present_catalogSchemaVersion || that_present_catalogSchemaVersion) {
      if (!(this_present_catalogSchemaVersion && that_present_catalogSchemaVersion))
        return false;
      if (this.catalogSchemaVersion != that.catalogSchemaVersion)
        return false;
    }

    boolean this_present_exists = true && this.isSetExists();
    boolean that_present_exists = true && that.isSetExists();
    if (this_present_exists || that_present_exists) {
      if (!(this_present_exists && that_present_exists))
        return false;
      if (this.exists != that.exists)
        return false;
    }

    boolean this_present_otherFlags = true && this.isSetOtherFlags();
    boolean that_present_otherFlags = true && that.isSetOtherFlags();
    if (this_present_otherFlags || that_present_otherFlags) {
      if (!(this_present_otherFlags && that_present_otherFlags))
        return false;
      if (!this.otherFlags.equals(that.otherFlags))
        return false;
    }

    boolean this_present_catalogDatabase = true && this.isSetCatalogDatabase();
    boolean that_present_catalogDatabase = true && that.isSetCatalogDatabase();
    if (this_present_catalogDatabase || that_present_catalogDatabase) {
      if (!(this_present_catalogDatabase && that_present_catalogDatabase))
        return false;
      if (!this.catalogDatabase.equals(that.catalogDatabase))
        return false;
    }

    boolean this_present_catalogTable = true && this.isSetCatalogTable();
    boolean that_present_catalogTable = true && that.isSetCatalogTable();
    if (this_present_catalogTable || that_present_catalogTable) {
      if (!(this_present_catalogTable && that_present_catalogTable))
        return false;
      if (!this.catalogTable.equals(that.catalogTable))
        return false;
    }

    boolean this_present_catalogFunction = true && this.isSetCatalogFunction();
    boolean that_present_catalogFunction = true && that.isSetCatalogFunction();
    if (this_present_catalogFunction || that_present_catalogFunction) {
      if (!(this_present_catalogFunction && that_present_catalogFunction))
        return false;
      if (!this.catalogFunction.equals(that.catalogFunction))
        return false;
    }

    boolean this_present_catalogPartitions = true && this.isSetCatalogPartitions();
    boolean that_present_catalogPartitions = true && that.isSetCatalogPartitions();
    if (this_present_catalogPartitions || that_present_catalogPartitions) {
      if (!(this_present_catalogPartitions && that_present_catalogPartitions))
        return false;
      if (!this.catalogPartitions.equals(that.catalogPartitions))
        return false;
    }

    boolean this_present_catalogStats = true && this.isSetCatalogStats();
    boolean that_present_catalogStats = true && that.isSetCatalogStats();
    if (this_present_catalogStats || that_present_catalogStats) {
      if (!(this_present_catalogStats && that_present_catalogStats))
        return false;
      if (!this.catalogStats.equals(that.catalogStats))
        return false;
    }

    boolean this_present_newSchema = true && this.isSetNewSchema();
    boolean that_present_newSchema = true && that.isSetNewSchema();
    if (this_present_newSchema || that_present_newSchema) {
      if (!(this_present_newSchema && that_present_newSchema))
        return false;
      if (!this.newSchema.equals(that.newSchema))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_names = true && (isSetNames());
    list.add(present_names);
    if (present_names)
      list.add(names);

    boolean present_properties = true && (isSetProperties());
    list.add(present_properties);
    if (present_properties)
      list.add(properties);

    boolean present_newProperties = true && (isSetNewProperties());
    list.add(present_newProperties);
    if (present_newProperties)
      list.add(newProperties);

    boolean present_catalogSchemaVersion = true && (isSetCatalogSchemaVersion());
    list.add(present_catalogSchemaVersion);
    if (present_catalogSchemaVersion)
      list.add(catalogSchemaVersion);

    boolean present_exists = true && (isSetExists());
    list.add(present_exists);
    if (present_exists)
      list.add(exists);

    boolean present_otherFlags = true && (isSetOtherFlags());
    list.add(present_otherFlags);
    if (present_otherFlags)
      list.add(otherFlags);

    boolean present_catalogDatabase = true && (isSetCatalogDatabase());
    list.add(present_catalogDatabase);
    if (present_catalogDatabase)
      list.add(catalogDatabase);

    boolean present_catalogTable = true && (isSetCatalogTable());
    list.add(present_catalogTable);
    if (present_catalogTable)
      list.add(catalogTable);

    boolean present_catalogFunction = true && (isSetCatalogFunction());
    list.add(present_catalogFunction);
    if (present_catalogFunction)
      list.add(catalogFunction);

    boolean present_catalogPartitions = true && (isSetCatalogPartitions());
    list.add(present_catalogPartitions);
    if (present_catalogPartitions)
      list.add(catalogPartitions);

    boolean present_catalogStats = true && (isSetCatalogStats());
    list.add(present_catalogStats);
    if (present_catalogStats)
      list.add(catalogStats);

    boolean present_newSchema = true && (isSetNewSchema());
    list.add(present_newSchema);
    if (present_newSchema)
      list.add(newSchema);

    return list.hashCode();
  }

  @Override
  public int compareTo(CatalogMetadataDetails other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNames()).compareTo(other.isSetNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.names, other.names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProperties()).compareTo(other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewProperties()).compareTo(other.isSetNewProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newProperties, other.newProperties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCatalogSchemaVersion()).compareTo(other.isSetCatalogSchemaVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatalogSchemaVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalogSchemaVersion, other.catalogSchemaVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExists()).compareTo(other.isSetExists());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExists()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exists, other.exists);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOtherFlags()).compareTo(other.isSetOtherFlags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOtherFlags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.otherFlags, other.otherFlags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCatalogDatabase()).compareTo(other.isSetCatalogDatabase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatalogDatabase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalogDatabase, other.catalogDatabase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCatalogTable()).compareTo(other.isSetCatalogTable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatalogTable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalogTable, other.catalogTable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCatalogFunction()).compareTo(other.isSetCatalogFunction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatalogFunction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalogFunction, other.catalogFunction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCatalogPartitions()).compareTo(other.isSetCatalogPartitions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatalogPartitions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalogPartitions, other.catalogPartitions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCatalogStats()).compareTo(other.isSetCatalogStats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatalogStats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalogStats, other.catalogStats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewSchema()).compareTo(other.isSetNewSchema());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewSchema()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newSchema, other.newSchema);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CatalogMetadataDetails(");
    boolean first = true;

    if (isSetNames()) {
      sb.append("names:");
      if (this.names == null) {
        sb.append("null");
      } else {
        sb.append(this.names);
      }
      first = false;
    }
    if (isSetProperties()) {
      if (!first) sb.append(", ");
      sb.append("properties:");
      if (this.properties == null) {
        sb.append("null");
      } else {
        sb.append(this.properties);
      }
      first = false;
    }
    if (isSetNewProperties()) {
      if (!first) sb.append(", ");
      sb.append("newProperties:");
      if (this.newProperties == null) {
        sb.append("null");
      } else {
        sb.append(this.newProperties);
      }
      first = false;
    }
    if (isSetCatalogSchemaVersion()) {
      if (!first) sb.append(", ");
      sb.append("catalogSchemaVersion:");
      sb.append(this.catalogSchemaVersion);
      first = false;
    }
    if (isSetExists()) {
      if (!first) sb.append(", ");
      sb.append("exists:");
      sb.append(this.exists);
      first = false;
    }
    if (isSetOtherFlags()) {
      if (!first) sb.append(", ");
      sb.append("otherFlags:");
      if (this.otherFlags == null) {
        sb.append("null");
      } else {
        sb.append(this.otherFlags);
      }
      first = false;
    }
    if (isSetCatalogDatabase()) {
      if (!first) sb.append(", ");
      sb.append("catalogDatabase:");
      if (this.catalogDatabase == null) {
        sb.append("null");
      } else {
        sb.append(this.catalogDatabase);
      }
      first = false;
    }
    if (isSetCatalogTable()) {
      if (!first) sb.append(", ");
      sb.append("catalogTable:");
      if (this.catalogTable == null) {
        sb.append("null");
      } else {
        sb.append(this.catalogTable);
      }
      first = false;
    }
    if (isSetCatalogFunction()) {
      if (!first) sb.append(", ");
      sb.append("catalogFunction:");
      if (this.catalogFunction == null) {
        sb.append("null");
      } else {
        sb.append(this.catalogFunction);
      }
      first = false;
    }
    if (isSetCatalogPartitions()) {
      if (!first) sb.append(", ");
      sb.append("catalogPartitions:");
      if (this.catalogPartitions == null) {
        sb.append("null");
      } else {
        sb.append(this.catalogPartitions);
      }
      first = false;
    }
    if (isSetCatalogStats()) {
      if (!first) sb.append(", ");
      sb.append("catalogStats:");
      if (this.catalogStats == null) {
        sb.append("null");
      } else {
        sb.append(this.catalogStats);
      }
      first = false;
    }
    if (isSetNewSchema()) {
      if (!first) sb.append(", ");
      sb.append("newSchema:");
      if (this.newSchema == null) {
        sb.append("null");
      } else {
        sb.append(this.newSchema);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (catalogDatabase != null) {
      catalogDatabase.validate();
    }
    if (catalogTable != null) {
      catalogTable.validate();
    }
    if (catalogFunction != null) {
      catalogFunction.validate();
    }
    if (catalogStats != null) {
      catalogStats.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CatalogMetadataDetailsStandardSchemeFactory implements SchemeFactory {
    public CatalogMetadataDetailsStandardScheme getScheme() {
      return new CatalogMetadataDetailsStandardScheme();
    }
  }

  private static class CatalogMetadataDetailsStandardScheme extends StandardScheme<CatalogMetadataDetails> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CatalogMetadataDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list430 = iprot.readListBegin();
                struct.names = new ArrayList<String>(_list430.size);
                String _elem431;
                for (int _i432 = 0; _i432 < _list430.size; ++_i432)
                {
                  _elem431 = iprot.readString();
                  struct.names.add(_elem431);
                }
                iprot.readListEnd();
              }
              struct.setNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list433 = iprot.readListBegin();
                struct.properties = new ArrayList<Map<String,String>>(_list433.size);
                Map<String,String> _elem434;
                for (int _i435 = 0; _i435 < _list433.size; ++_i435)
                {
                  {
                    org.apache.thrift.protocol.TMap _map436 = iprot.readMapBegin();
                    _elem434 = new HashMap<String,String>(2*_map436.size);
                    String _key437;
                    String _val438;
                    for (int _i439 = 0; _i439 < _map436.size; ++_i439)
                    {
                      _key437 = iprot.readString();
                      _val438 = iprot.readString();
                      _elem434.put(_key437, _val438);
                    }
                    iprot.readMapEnd();
                  }
                  struct.properties.add(_elem434);
                }
                iprot.readListEnd();
              }
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NEW_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list440 = iprot.readListBegin();
                struct.newProperties = new ArrayList<Map<String,String>>(_list440.size);
                Map<String,String> _elem441;
                for (int _i442 = 0; _i442 < _list440.size; ++_i442)
                {
                  {
                    org.apache.thrift.protocol.TMap _map443 = iprot.readMapBegin();
                    _elem441 = new HashMap<String,String>(2*_map443.size);
                    String _key444;
                    String _val445;
                    for (int _i446 = 0; _i446 < _map443.size; ++_i446)
                    {
                      _key444 = iprot.readString();
                      _val445 = iprot.readString();
                      _elem441.put(_key444, _val445);
                    }
                    iprot.readMapEnd();
                  }
                  struct.newProperties.add(_elem441);
                }
                iprot.readListEnd();
              }
              struct.setNewPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CATALOG_SCHEMA_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.catalogSchemaVersion = iprot.readI64();
              struct.setCatalogSchemaVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXISTS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.exists = iprot.readBool();
              struct.setExistsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OTHER_FLAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list447 = iprot.readListBegin();
                struct.otherFlags = new ArrayList<Integer>(_list447.size);
                int _elem448;
                for (int _i449 = 0; _i449 < _list447.size; ++_i449)
                {
                  _elem448 = iprot.readI32();
                  struct.otherFlags.add(_elem448);
                }
                iprot.readListEnd();
              }
              struct.setOtherFlagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CATALOG_DATABASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.catalogDatabase = new CatalogSchemaObject();
              struct.catalogDatabase.read(iprot);
              struct.setCatalogDatabaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CATALOG_TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.catalogTable = new CatalogTableObject();
              struct.catalogTable.read(iprot);
              struct.setCatalogTableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CATALOG_FUNCTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.catalogFunction = new CatalogFunctionObject();
              struct.catalogFunction.read(iprot);
              struct.setCatalogFunctionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CATALOG_PARTITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list450 = iprot.readListBegin();
                struct.catalogPartitions = new ArrayList<CatalogPartitionObject>(_list450.size);
                CatalogPartitionObject _elem451;
                for (int _i452 = 0; _i452 < _list450.size; ++_i452)
                {
                  _elem451 = new CatalogPartitionObject();
                  _elem451.read(iprot);
                  struct.catalogPartitions.add(_elem451);
                }
                iprot.readListEnd();
              }
              struct.setCatalogPartitionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CATALOG_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.catalogStats = new CatalogStats();
              struct.catalogStats.read(iprot);
              struct.setCatalogStatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // NEW_SCHEMA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newSchema = iprot.readString();
              struct.setNewSchemaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CatalogMetadataDetails struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.names != null) {
        if (struct.isSetNames()) {
          oprot.writeFieldBegin(NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.names.size()));
            for (String _iter453 : struct.names)
            {
              oprot.writeString(_iter453);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.properties != null) {
        if (struct.isSetProperties()) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.properties.size()));
            for (Map<String,String> _iter454 : struct.properties)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter454.size()));
                for (Map.Entry<String, String> _iter455 : _iter454.entrySet())
                {
                  oprot.writeString(_iter455.getKey());
                  oprot.writeString(_iter455.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.newProperties != null) {
        if (struct.isSetNewProperties()) {
          oprot.writeFieldBegin(NEW_PROPERTIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.newProperties.size()));
            for (Map<String,String> _iter456 : struct.newProperties)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter456.size()));
                for (Map.Entry<String, String> _iter457 : _iter456.entrySet())
                {
                  oprot.writeString(_iter457.getKey());
                  oprot.writeString(_iter457.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCatalogSchemaVersion()) {
        oprot.writeFieldBegin(CATALOG_SCHEMA_VERSION_FIELD_DESC);
        oprot.writeI64(struct.catalogSchemaVersion);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExists()) {
        oprot.writeFieldBegin(EXISTS_FIELD_DESC);
        oprot.writeBool(struct.exists);
        oprot.writeFieldEnd();
      }
      if (struct.otherFlags != null) {
        if (struct.isSetOtherFlags()) {
          oprot.writeFieldBegin(OTHER_FLAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.otherFlags.size()));
            for (int _iter458 : struct.otherFlags)
            {
              oprot.writeI32(_iter458);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.catalogDatabase != null) {
        if (struct.isSetCatalogDatabase()) {
          oprot.writeFieldBegin(CATALOG_DATABASE_FIELD_DESC);
          struct.catalogDatabase.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.catalogTable != null) {
        if (struct.isSetCatalogTable()) {
          oprot.writeFieldBegin(CATALOG_TABLE_FIELD_DESC);
          struct.catalogTable.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.catalogFunction != null) {
        if (struct.isSetCatalogFunction()) {
          oprot.writeFieldBegin(CATALOG_FUNCTION_FIELD_DESC);
          struct.catalogFunction.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.catalogPartitions != null) {
        if (struct.isSetCatalogPartitions()) {
          oprot.writeFieldBegin(CATALOG_PARTITIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.catalogPartitions.size()));
            for (CatalogPartitionObject _iter459 : struct.catalogPartitions)
            {
              _iter459.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.catalogStats != null) {
        if (struct.isSetCatalogStats()) {
          oprot.writeFieldBegin(CATALOG_STATS_FIELD_DESC);
          struct.catalogStats.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.newSchema != null) {
        if (struct.isSetNewSchema()) {
          oprot.writeFieldBegin(NEW_SCHEMA_FIELD_DESC);
          oprot.writeString(struct.newSchema);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CatalogMetadataDetailsTupleSchemeFactory implements SchemeFactory {
    public CatalogMetadataDetailsTupleScheme getScheme() {
      return new CatalogMetadataDetailsTupleScheme();
    }
  }

  private static class CatalogMetadataDetailsTupleScheme extends TupleScheme<CatalogMetadataDetails> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CatalogMetadataDetails struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNames()) {
        optionals.set(0);
      }
      if (struct.isSetProperties()) {
        optionals.set(1);
      }
      if (struct.isSetNewProperties()) {
        optionals.set(2);
      }
      if (struct.isSetCatalogSchemaVersion()) {
        optionals.set(3);
      }
      if (struct.isSetExists()) {
        optionals.set(4);
      }
      if (struct.isSetOtherFlags()) {
        optionals.set(5);
      }
      if (struct.isSetCatalogDatabase()) {
        optionals.set(6);
      }
      if (struct.isSetCatalogTable()) {
        optionals.set(7);
      }
      if (struct.isSetCatalogFunction()) {
        optionals.set(8);
      }
      if (struct.isSetCatalogPartitions()) {
        optionals.set(9);
      }
      if (struct.isSetCatalogStats()) {
        optionals.set(10);
      }
      if (struct.isSetNewSchema()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetNames()) {
        {
          oprot.writeI32(struct.names.size());
          for (String _iter460 : struct.names)
          {
            oprot.writeString(_iter460);
          }
        }
      }
      if (struct.isSetProperties()) {
        {
          oprot.writeI32(struct.properties.size());
          for (Map<String,String> _iter461 : struct.properties)
          {
            {
              oprot.writeI32(_iter461.size());
              for (Map.Entry<String, String> _iter462 : _iter461.entrySet())
              {
                oprot.writeString(_iter462.getKey());
                oprot.writeString(_iter462.getValue());
              }
            }
          }
        }
      }
      if (struct.isSetNewProperties()) {
        {
          oprot.writeI32(struct.newProperties.size());
          for (Map<String,String> _iter463 : struct.newProperties)
          {
            {
              oprot.writeI32(_iter463.size());
              for (Map.Entry<String, String> _iter464 : _iter463.entrySet())
              {
                oprot.writeString(_iter464.getKey());
                oprot.writeString(_iter464.getValue());
              }
            }
          }
        }
      }
      if (struct.isSetCatalogSchemaVersion()) {
        oprot.writeI64(struct.catalogSchemaVersion);
      }
      if (struct.isSetExists()) {
        oprot.writeBool(struct.exists);
      }
      if (struct.isSetOtherFlags()) {
        {
          oprot.writeI32(struct.otherFlags.size());
          for (int _iter465 : struct.otherFlags)
          {
            oprot.writeI32(_iter465);
          }
        }
      }
      if (struct.isSetCatalogDatabase()) {
        struct.catalogDatabase.write(oprot);
      }
      if (struct.isSetCatalogTable()) {
        struct.catalogTable.write(oprot);
      }
      if (struct.isSetCatalogFunction()) {
        struct.catalogFunction.write(oprot);
      }
      if (struct.isSetCatalogPartitions()) {
        {
          oprot.writeI32(struct.catalogPartitions.size());
          for (CatalogPartitionObject _iter466 : struct.catalogPartitions)
          {
            _iter466.write(oprot);
          }
        }
      }
      if (struct.isSetCatalogStats()) {
        struct.catalogStats.write(oprot);
      }
      if (struct.isSetNewSchema()) {
        oprot.writeString(struct.newSchema);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CatalogMetadataDetails struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list467 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.names = new ArrayList<String>(_list467.size);
          String _elem468;
          for (int _i469 = 0; _i469 < _list467.size; ++_i469)
          {
            _elem468 = iprot.readString();
            struct.names.add(_elem468);
          }
        }
        struct.setNamesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list470 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.properties = new ArrayList<Map<String,String>>(_list470.size);
          Map<String,String> _elem471;
          for (int _i472 = 0; _i472 < _list470.size; ++_i472)
          {
            {
              org.apache.thrift.protocol.TMap _map473 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _elem471 = new HashMap<String,String>(2*_map473.size);
              String _key474;
              String _val475;
              for (int _i476 = 0; _i476 < _map473.size; ++_i476)
              {
                _key474 = iprot.readString();
                _val475 = iprot.readString();
                _elem471.put(_key474, _val475);
              }
            }
            struct.properties.add(_elem471);
          }
        }
        struct.setPropertiesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list477 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.newProperties = new ArrayList<Map<String,String>>(_list477.size);
          Map<String,String> _elem478;
          for (int _i479 = 0; _i479 < _list477.size; ++_i479)
          {
            {
              org.apache.thrift.protocol.TMap _map480 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _elem478 = new HashMap<String,String>(2*_map480.size);
              String _key481;
              String _val482;
              for (int _i483 = 0; _i483 < _map480.size; ++_i483)
              {
                _key481 = iprot.readString();
                _val482 = iprot.readString();
                _elem478.put(_key481, _val482);
              }
            }
            struct.newProperties.add(_elem478);
          }
        }
        struct.setNewPropertiesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.catalogSchemaVersion = iprot.readI64();
        struct.setCatalogSchemaVersionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.exists = iprot.readBool();
        struct.setExistsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list484 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.otherFlags = new ArrayList<Integer>(_list484.size);
          int _elem485;
          for (int _i486 = 0; _i486 < _list484.size; ++_i486)
          {
            _elem485 = iprot.readI32();
            struct.otherFlags.add(_elem485);
          }
        }
        struct.setOtherFlagsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.catalogDatabase = new CatalogSchemaObject();
        struct.catalogDatabase.read(iprot);
        struct.setCatalogDatabaseIsSet(true);
      }
      if (incoming.get(7)) {
        struct.catalogTable = new CatalogTableObject();
        struct.catalogTable.read(iprot);
        struct.setCatalogTableIsSet(true);
      }
      if (incoming.get(8)) {
        struct.catalogFunction = new CatalogFunctionObject();
        struct.catalogFunction.read(iprot);
        struct.setCatalogFunctionIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list487 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.catalogPartitions = new ArrayList<CatalogPartitionObject>(_list487.size);
          CatalogPartitionObject _elem488;
          for (int _i489 = 0; _i489 < _list487.size; ++_i489)
          {
            _elem488 = new CatalogPartitionObject();
            _elem488.read(iprot);
            struct.catalogPartitions.add(_elem488);
          }
        }
        struct.setCatalogPartitionsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.catalogStats = new CatalogStats();
        struct.catalogStats.read(iprot);
        struct.setCatalogStatsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.newSchema = iprot.readString();
        struct.setNewSchemaIsSet(true);
      }
    }
  }

}

