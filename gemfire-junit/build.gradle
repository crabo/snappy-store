/*
 * Copyright (c) 2017-2019 TIBCO Software Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License. You
 * may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License. See accompanying
 * LICENSE file.
 */

dependencies {
  compile project(subprojectBase + 'gemfire-core')

  compile "net.spy:spymemcached:${memcachedVersion}"
  compile "org.apache.bcel:bcel:${bcelVersion}"
  compile "junit:junit:${junitVersion}"
  compile "org.hamcrest:hamcrest-core:${hamcrestVersion}"
  compile "org.hamcrest:hamcrest-library:${hamcrestVersion}"
  compile "org.jmock:jmock:${jmockVersion}"
  compile "org.jmock:jmock-legacy:${jmockVersion}"
  compile "edu.umd.cs.mtc:multithreadedtc:${multiThreadedTCVersion}"
  compile "cglib:cglib-nodep:${cglibVersion}"
  compile "org.objenesis:objenesis:${objenesisVersion}"
  compile "antlr:antlr:${antlr2Version}"

  compile "net.sourceforge.jline:jline:${jlineSfVersion}"
  compile "org.eclipse.jetty:jetty-http:${jettyVersion}"
  compile "org.eclipse.jetty:jetty-io:${jettyVersion}"
  compile "org.eclipse.jetty:jetty-security:${jettyVersion}"
  compile "org.eclipse.jetty:jetty-server:${jettyVersion}"
  compile "org.eclipse.jetty:jetty-servlet:${jettyVersion}"
  compile "org.eclipse.jetty:jetty-util:${jettyVersion}"
  compile "org.eclipse.jetty:jetty-webapp:${jettyVersion}"
  compile "org.eclipse.jetty:jetty-xml:${jettyVersion}"

  compile "org.springframework:spring-aop:${springVersion}"
  compile "org.springframework:spring-beans:${springVersion}"
  compile "org.springframework:spring-context:${springVersion}"
  compile "org.springframework:spring-context-support:${springVersion}"
  compile "org.springframework:spring-core:${springVersion}"
  compile "org.springframework:spring-expression:${springVersion}"
  compile "org.springframework:spring-web:${springVersion}"
  compile "org.springframework:spring-webmvc:${springVersion}"
  compile "org.springframework:spring-tx:${springVersion}"
  compile "org.springframework.shell:spring-shell:${springShellVersion}"

  compile "org.apache.hadoop:hadoop-annotations:${hadoopVersion}"
  compile "org.apache.hadoop:hadoop-auth:${hadoopVersion}"
  compile "org.apache.hadoop:hadoop-common:${hadoopVersion}"
  compile "org.apache.hadoop:hadoop-hdfs:${hadoopVersion}"
  compile "org.apache.hadoop:hadoop-mapreduce-client-core:${hadoopVersion}"
  compile "com.google.protobuf:protobuf-java:${protobufVersion}"
  compile "org.apache.hbase:hbase-common:${hbaseVersion}"
  compile "org.apache.hbase:hbase-protocol:${hbaseVersion}"
  compile "org.apache.hbase:hbase-client:${hbaseVersion}"
  compile "org.apache.hbase:hbase-server:${hbaseVersion}"
  compile "com.sun.jersey:jersey-core:${sunJerseyVersion}"
  compile "com.sun.jersey:jersey-server:${sunJerseyVersion}"
  compile "com.sun.jersey:jersey-servlet:${sunJerseyVersion}"
  compile "org.mortbay.jetty:jetty:${hadoopJettyVersion}"
  compile "org.mortbay.jetty:jetty-util:${hadoopJettyVersion}"
  compile "org.mortbay.jetty:jetty-sslengine:${hadoopJettyVersion}"
  compile "org.cloudera.htrace:htrace-core:${clouderaHtraceVersion}"
  compile "org.glassfish.jersey.core:jersey-server:${jerseyVersion}"
  compile "org.glassfish.jersey.containers:jersey-container-servlet-core:${jerseyVersion}"
  compile "org.eclipse.jetty:jetty-server:${jettyVersion}"
  compile "org.eclipse.jetty:jetty-util:${jettyVersion}"
  compile "com.google.code.findbugs:jsr305:${jsr305Version}"

  compile "org.apache.hadoop:hadoop-common:${hadoopVersion}:tests"
  compile "org.apache.hadoop:hadoop-hdfs:${hadoopVersion}:tests"

  // use dunit support from snappydata
  if (subprojectBase == ':') {
    compile 'io.snappydata:dunit:${snappyDunitVersion}'
  } else {
    compile project(':dunit')
  }
}
