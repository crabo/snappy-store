/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#ifndef SNAPPYDATA_STRUCT_CATALOGMETADATAREQUEST_H
#define SNAPPYDATA_STRUCT_CATALOGMETADATAREQUEST_H


#include "snappydata_struct_Decimal.h"
#include "snappydata_struct_BlobChunk.h"
#include "snappydata_struct_ClobChunk.h"
#include "snappydata_struct_TransactionXid.h"
#include "snappydata_struct_ServiceMetaData.h"
#include "snappydata_struct_ServiceMetaDataArgs.h"
#include "snappydata_struct_OpenConnectionArgs.h"
#include "snappydata_struct_ConnectionProperties.h"
#include "snappydata_struct_HostAddress.h"
#include "snappydata_struct_SnappyExceptionData.h"
#include "snappydata_struct_StatementAttrs.h"
#include "snappydata_struct_ColumnValue.h"
#include "snappydata_struct_ColumnDescriptor.h"
#include "snappydata_struct_Row.h"
#include "snappydata_struct_OutputParameter.h"
#include "snappydata_struct_RowSet.h"
#include "snappydata_struct_PrepareResult.h"
#include "snappydata_struct_UpdateResult.h"
#include "snappydata_struct_StatementResult.h"
#include "snappydata_struct_BucketOwners.h"
#include "snappydata_struct_CatalogStorage.h"
#include "snappydata_struct_CatalogSchemaObject.h"
#include "snappydata_struct_CatalogStats.h"
#include "snappydata_struct_CatalogTableObject.h"
#include "snappydata_struct_CatalogFunctionObject.h"
#include "snappydata_struct_CatalogPartitionObject.h"

#include "snappydata_types.h"

namespace io { namespace snappydata { namespace thrift {

typedef struct _CatalogMetadataRequest__isset {
  _CatalogMetadataRequest__isset() : databaseName(false), nameOrPattern(false), properties(false) {}
  bool databaseName :1;
  bool nameOrPattern :1;
  bool properties :1;
} _CatalogMetadataRequest__isset;

class CatalogMetadataRequest {
 public:

  CatalogMetadataRequest(const CatalogMetadataRequest&);
  CatalogMetadataRequest(CatalogMetadataRequest&&) noexcept;
  CatalogMetadataRequest& operator=(const CatalogMetadataRequest&);
  CatalogMetadataRequest& operator=(CatalogMetadataRequest&&) noexcept;
  CatalogMetadataRequest() : databaseName(), nameOrPattern() {
  }

  virtual ~CatalogMetadataRequest() noexcept;
  std::string databaseName;
  std::string nameOrPattern;
  std::map<std::string, std::string>  properties;

  _CatalogMetadataRequest__isset __isset;

  void __set_databaseName(const std::string& val);

  void __set_nameOrPattern(const std::string& val);

  void __set_properties(const std::map<std::string, std::string> & val);

  bool operator == (const CatalogMetadataRequest & rhs) const
  {
    if (__isset.databaseName != rhs.__isset.databaseName)
      return false;
    else if (__isset.databaseName && !(databaseName == rhs.databaseName))
      return false;
    if (__isset.nameOrPattern != rhs.__isset.nameOrPattern)
      return false;
    else if (__isset.nameOrPattern && !(nameOrPattern == rhs.nameOrPattern))
      return false;
    if (__isset.properties != rhs.__isset.properties)
      return false;
    else if (__isset.properties && !(properties == rhs.properties))
      return false;
    return true;
  }
  bool operator != (const CatalogMetadataRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CatalogMetadataRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CatalogMetadataRequest &a, CatalogMetadataRequest &b);

inline std::ostream& operator<<(std::ostream& out, const CatalogMetadataRequest& obj)
{
  obj.printTo(out);
  return out;
}

}}} // namespace

#endif
