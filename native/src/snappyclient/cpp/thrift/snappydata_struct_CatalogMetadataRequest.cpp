/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "snappydata_struct_CatalogMetadataRequest.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace io { namespace snappydata { namespace thrift {


CatalogMetadataRequest::~CatalogMetadataRequest() noexcept {
}


void CatalogMetadataRequest::__set_databaseName(const std::string& val) {
  this->databaseName = val;
__isset.databaseName = true;
}

void CatalogMetadataRequest::__set_nameOrPattern(const std::string& val) {
  this->nameOrPattern = val;
__isset.nameOrPattern = true;
}

void CatalogMetadataRequest::__set_properties(const std::map<std::string, std::string> & val) {
  this->properties = val;
__isset.properties = true;
}

uint32_t CatalogMetadataRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->databaseName);
          this->__isset.databaseName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nameOrPattern);
          this->__isset.nameOrPattern = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->properties.clear();
            uint32_t _size446;
            ::apache::thrift::protocol::TType _ktype447;
            ::apache::thrift::protocol::TType _vtype448;
            xfer += iprot->readMapBegin(_ktype447, _vtype448, _size446);
            uint32_t _i450;
            for (_i450 = 0; _i450 < _size446; ++_i450)
            {
              std::string _key451;
              xfer += iprot->readString(_key451);
              std::string& _val452 = this->properties[_key451];
              xfer += iprot->readString(_val452);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.properties = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CatalogMetadataRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CatalogMetadataRequest");

  if (this->__isset.databaseName) {
    xfer += oprot->writeFieldBegin("databaseName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->databaseName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.nameOrPattern) {
    xfer += oprot->writeFieldBegin("nameOrPattern", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->nameOrPattern);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.properties) {
    xfer += oprot->writeFieldBegin("properties", ::apache::thrift::protocol::T_MAP, 3);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->properties.size()));
      std::map<std::string, std::string> ::const_iterator _iter453;
      for (_iter453 = this->properties.begin(); _iter453 != this->properties.end(); ++_iter453)
      {
        xfer += oprot->writeString(_iter453->first);
        xfer += oprot->writeString(_iter453->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CatalogMetadataRequest &a, CatalogMetadataRequest &b) {
  using ::std::swap;
  swap(a.databaseName, b.databaseName);
  swap(a.nameOrPattern, b.nameOrPattern);
  swap(a.properties, b.properties);
  swap(a.__isset, b.__isset);
}

CatalogMetadataRequest::CatalogMetadataRequest(const CatalogMetadataRequest& other454) {
  databaseName = other454.databaseName;
  nameOrPattern = other454.nameOrPattern;
  properties = other454.properties;
  __isset = other454.__isset;
}
CatalogMetadataRequest::CatalogMetadataRequest( CatalogMetadataRequest&& other455) noexcept {
  databaseName = std::move(other455.databaseName);
  nameOrPattern = std::move(other455.nameOrPattern);
  properties = std::move(other455.properties);
  __isset = std::move(other455.__isset);
}
CatalogMetadataRequest& CatalogMetadataRequest::operator=(const CatalogMetadataRequest& other456) {
  databaseName = other456.databaseName;
  nameOrPattern = other456.nameOrPattern;
  properties = other456.properties;
  __isset = other456.__isset;
  return *this;
}
CatalogMetadataRequest& CatalogMetadataRequest::operator=(CatalogMetadataRequest&& other457) noexcept {
  databaseName = std::move(other457.databaseName);
  nameOrPattern = std::move(other457.nameOrPattern);
  properties = std::move(other457.properties);
  __isset = std::move(other457.__isset);
  return *this;
}
void CatalogMetadataRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CatalogMetadataRequest(";
  out << "databaseName="; (__isset.databaseName ? (out << to_string(databaseName)) : (out << "<null>"));
  out << ", " << "nameOrPattern="; (__isset.nameOrPattern ? (out << to_string(nameOrPattern)) : (out << "<null>"));
  out << ", " << "properties="; (__isset.properties ? (out << to_string(properties)) : (out << "<null>"));
  out << ")";
}

}}} // namespace
